!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module slicot ! in 
    interface  ! in :slicot
        subroutine ab01md(jobz,n,a,lda,b,ncont,z,ldz,tau,tol,dwork,ldwork,info) ! in :slicot:AB01MD.f
            character*1 :: jobz
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: b
            integer :: ncont
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: tau
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab01md
        subroutine ab01nd(jobz,n,m,a,lda,b,ldb,ncont,indcon,nblk,z,ldz,tau,tol,iwork,dwork,ldwork,info) ! in :slicot:AB01ND.f
            character*1 :: jobz
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer :: ncont
            integer :: indcon
            integer dimension(*) :: nblk
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: tau
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab01nd
        subroutine ab01od(stages,jobu,jobv,n,m,a,lda,b,ldb,u,ldu,v,ldv,ncont,indcon,kstair,tol,iwork,dwork,ldwork,info) ! in :slicot:AB01OD.f
            character*1 :: stages
            character*1 :: jobu
            character*1 :: jobv
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            integer :: ncont
            integer :: indcon
            integer dimension(*) :: kstair
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab01od
        subroutine ab04md(type_bn,n,m,p,alpha,beta,a,lda,b,ldb,c,ldc,d,ldd,iwork,dwork,ldwork,info) ! in :slicot:AB04MD.f
            character*1 :: type_bn
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision :: beta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab04md
        subroutine ab05md(uplo,over,n1,m1,p1,n2,p2,a1,lda1,b1,ldb1,c1,ldc1,d1,ldd1,a2,lda2,b2,ldb2,c2,ldc2,d2,ldd2,n,a,lda,b,ldb,c,ldc,d,ldd,dwork,ldwork,info) ! in :slicot:AB05MD.f
            character*1 :: uplo
            character*1 :: over
            integer :: n1
            integer :: m1
            integer :: p1
            integer :: n2
            integer :: p2
            double precision dimension(lda1,*) :: a1
            integer optional,check(shape(a1,0)==lda1),depend(a1) :: lda1=shape(a1,0)
            double precision dimension(ldb1,*) :: b1
            integer optional,check(shape(b1,0)==ldb1),depend(b1) :: ldb1=shape(b1,0)
            double precision dimension(ldc1,*) :: c1
            integer optional,check(shape(c1,0)==ldc1),depend(c1) :: ldc1=shape(c1,0)
            double precision dimension(ldd1,*) :: d1
            integer optional,check(shape(d1,0)==ldd1),depend(d1) :: ldd1=shape(d1,0)
            double precision dimension(lda2,*) :: a2
            integer optional,check(shape(a2,0)==lda2),depend(a2) :: lda2=shape(a2,0)
            double precision dimension(ldb2,*) :: b2
            integer optional,check(shape(b2,0)==ldb2),depend(b2) :: ldb2=shape(b2,0)
            double precision dimension(ldc2,*) :: c2
            integer optional,check(shape(c2,0)==ldc2),depend(c2) :: ldc2=shape(c2,0)
            double precision dimension(ldd2,*) :: d2
            integer optional,check(shape(d2,0)==ldd2),depend(d2) :: ldd2=shape(d2,0)
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab05md
        subroutine ab05nd(over,n1,m1,p1,n2,alpha,a1,lda1,b1,ldb1,c1,ldc1,d1,ldd1,a2,lda2,b2,ldb2,c2,ldc2,d2,ldd2,n,a,lda,b,ldb,c,ldc,d,ldd,iwork,dwork,ldwork,info) ! in :slicot:AB05ND.f
            character*1 :: over
            integer :: n1
            integer :: m1
            integer :: p1
            integer :: n2
            double precision :: alpha
            double precision dimension(lda1,*) :: a1
            integer optional,check(shape(a1,0)==lda1),depend(a1) :: lda1=shape(a1,0)
            double precision dimension(ldb1,*) :: b1
            integer optional,check(shape(b1,0)==ldb1),depend(b1) :: ldb1=shape(b1,0)
            double precision dimension(ldc1,*) :: c1
            integer optional,check(shape(c1,0)==ldc1),depend(c1) :: ldc1=shape(c1,0)
            double precision dimension(ldd1,*) :: d1
            integer optional,check(shape(d1,0)==ldd1),depend(d1) :: ldd1=shape(d1,0)
            double precision dimension(lda2,*) :: a2
            integer optional,check(shape(a2,0)==lda2),depend(a2) :: lda2=shape(a2,0)
            double precision dimension(ldb2,*) :: b2
            integer optional,check(shape(b2,0)==ldb2),depend(b2) :: ldb2=shape(b2,0)
            double precision dimension(ldc2,*) :: c2
            integer optional,check(shape(c2,0)==ldc2),depend(c2) :: ldc2=shape(c2,0)
            double precision dimension(ldd2,*) :: d2
            integer optional,check(shape(d2,0)==ldd2),depend(d2) :: ldd2=shape(d2,0)
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab05nd
        subroutine ab05od(over,n1,m1,p1,n2,m2,alpha,a1,lda1,b1,ldb1,c1,ldc1,d1,ldd1,a2,lda2,b2,ldb2,c2,ldc2,d2,ldd2,n,m,a,lda,b,ldb,c,ldc,d,ldd,info) ! in :slicot:AB05OD.f
            character*1 :: over
            integer :: n1
            integer :: m1
            integer :: p1
            integer :: n2
            integer :: m2
            double precision :: alpha
            double precision dimension(lda1,*) :: a1
            integer optional,check(shape(a1,0)==lda1),depend(a1) :: lda1=shape(a1,0)
            double precision dimension(ldb1,*) :: b1
            integer optional,check(shape(b1,0)==ldb1),depend(b1) :: ldb1=shape(b1,0)
            double precision dimension(ldc1,*) :: c1
            integer optional,check(shape(c1,0)==ldc1),depend(c1) :: ldc1=shape(c1,0)
            double precision dimension(ldd1,*) :: d1
            integer optional,check(shape(d1,0)==ldd1),depend(d1) :: ldd1=shape(d1,0)
            double precision dimension(lda2,*) :: a2
            integer optional,check(shape(a2,0)==lda2),depend(a2) :: lda2=shape(a2,0)
            double precision dimension(ldb2,*) :: b2
            integer optional,check(shape(b2,0)==ldb2),depend(b2) :: ldb2=shape(b2,0)
            double precision dimension(ldc2,*) :: c2
            integer optional,check(shape(c2,0)==ldc2),depend(c2) :: ldc2=shape(c2,0)
            double precision dimension(ldd2,*) :: d2
            integer optional,check(shape(d2,0)==ldd2),depend(d2) :: ldd2=shape(d2,0)
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: info
        end subroutine ab05od
        subroutine ab05pd(over,n1,m,p,n2,alpha,a1,lda1,b1,ldb1,c1,ldc1,d1,ldd1,a2,lda2,b2,ldb2,c2,ldc2,d2,ldd2,n,a,lda,b,ldb,c,ldc,d,ldd,info) ! in :slicot:AB05PD.f
            character*1 :: over
            integer :: n1
            integer :: m
            integer :: p
            integer :: n2
            double precision :: alpha
            double precision dimension(lda1,*) :: a1
            integer optional,check(shape(a1,0)==lda1),depend(a1) :: lda1=shape(a1,0)
            double precision dimension(ldb1,*) :: b1
            integer optional,check(shape(b1,0)==ldb1),depend(b1) :: ldb1=shape(b1,0)
            double precision dimension(ldc1,*) :: c1
            integer optional,check(shape(c1,0)==ldc1),depend(c1) :: ldc1=shape(c1,0)
            double precision dimension(ldd1,*) :: d1
            integer optional,check(shape(d1,0)==ldd1),depend(d1) :: ldd1=shape(d1,0)
            double precision dimension(lda2,*) :: a2
            integer optional,check(shape(a2,0)==lda2),depend(a2) :: lda2=shape(a2,0)
            double precision dimension(ldb2,*) :: b2
            integer optional,check(shape(b2,0)==ldb2),depend(b2) :: ldb2=shape(b2,0)
            double precision dimension(ldc2,*) :: c2
            integer optional,check(shape(c2,0)==ldc2),depend(c2) :: ldc2=shape(c2,0)
            double precision dimension(ldd2,*) :: d2
            integer optional,check(shape(d2,0)==ldd2),depend(d2) :: ldd2=shape(d2,0)
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: info
        end subroutine ab05pd
        subroutine ab05qd(over,n1,m1,p1,n2,m2,p2,a1,lda1,b1,ldb1,c1,ldc1,d1,ldd1,a2,lda2,b2,ldb2,c2,ldc2,d2,ldd2,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,info) ! in :slicot:AB05QD.f
            character*1 :: over
            integer :: n1
            integer :: m1
            integer :: p1
            integer :: n2
            integer :: m2
            integer :: p2
            double precision dimension(lda1,*) :: a1
            integer optional,check(shape(a1,0)==lda1),depend(a1) :: lda1=shape(a1,0)
            double precision dimension(ldb1,*) :: b1
            integer optional,check(shape(b1,0)==ldb1),depend(b1) :: ldb1=shape(b1,0)
            double precision dimension(ldc1,*) :: c1
            integer optional,check(shape(c1,0)==ldc1),depend(c1) :: ldc1=shape(c1,0)
            double precision dimension(ldd1,*) :: d1
            integer optional,check(shape(d1,0)==ldd1),depend(d1) :: ldd1=shape(d1,0)
            double precision dimension(lda2,*) :: a2
            integer optional,check(shape(a2,0)==lda2),depend(a2) :: lda2=shape(a2,0)
            double precision dimension(ldb2,*) :: b2
            integer optional,check(shape(b2,0)==ldb2),depend(b2) :: ldb2=shape(b2,0)
            double precision dimension(ldc2,*) :: c2
            integer optional,check(shape(c2,0)==ldc2),depend(c2) :: ldc2=shape(c2,0)
            double precision dimension(ldd2,*) :: d2
            integer optional,check(shape(d2,0)==ldd2),depend(d2) :: ldd2=shape(d2,0)
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: info
        end subroutine ab05qd
        subroutine ab05rd(fbtype,jobd,n,m,p,mv,pz,alpha,beta,a,lda,b,ldb,c,ldc,d,ldd,f,ldf,k,ldk,g,ldg,h,ldh,rcond,bc,ldbc,cc,ldcc,dc,lddc,iwork,dwork,ldwork,info) ! in :slicot:AB05RD.f
            character*1 :: fbtype
            character*1 :: jobd
            integer :: n
            integer :: m
            integer :: p
            integer :: mv
            integer :: pz
            double precision :: alpha
            double precision :: beta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision :: rcond
            double precision dimension(ldbc,*) :: bc
            integer optional,check(shape(bc,0)==ldbc),depend(bc) :: ldbc=shape(bc,0)
            double precision dimension(ldcc,*) :: cc
            integer optional,check(shape(cc,0)==ldcc),depend(cc) :: ldcc=shape(cc,0)
            double precision dimension(lddc,*) :: dc
            integer optional,check(shape(dc,0)==lddc),depend(dc) :: lddc=shape(dc,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab05rd
        subroutine ab05sd(fbtype,jobd,n,m,p,alpha,a,lda,b,ldb,c,ldc,d,ldd,f,ldf,rcond,iwork,dwork,ldwork,info) ! in :slicot:AB05SD.f
            character*1 :: fbtype
            character*1 :: jobd
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision :: rcond
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab05sd
        subroutine ab07md(jobd,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,info) ! in :slicot:AB07MD.f
            character*1 :: jobd
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: info
        end subroutine ab07md
        subroutine ab07nd(n,m,a,lda,b,ldb,c,ldc,d,ldd,rcond,iwork,dwork,ldwork,info) ! in :slicot:AB07ND.f
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: rcond
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab07nd
        subroutine ab08nd(equil,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,nu,rank_bn,dinfz,nkror,nkrol,infz,kronr,kronl,af,ldaf,bf,ldbf,tol,iwork,dwork,ldwork,info) ! in :slicot:AB08ND.f
            character*1 :: equil
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nu
            integer :: rank_bn
            integer :: dinfz
            integer :: nkror
            integer :: nkrol
            integer dimension(*) :: infz
            integer dimension(*) :: kronr
            integer dimension(*) :: kronl
            double precision dimension(ldaf,*) :: af
            integer optional,check(shape(af,0)==ldaf),depend(af) :: ldaf=shape(af,0)
            double precision dimension(ldbf,*) :: bf
            integer optional,check(shape(bf,0)==ldbf),depend(bf) :: ldbf=shape(bf,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab08nd
        subroutine ab08nx(n,m,p,ro,sigma,svlmax,abcd,ldabcd,ninfz,infz,kronl,mu,nu,nkrol,tol,iwork,dwork,ldwork,info) ! in :slicot:AB08NX.f
            integer :: n
            integer :: m
            integer :: p
            integer :: ro
            integer :: sigma
            double precision :: svlmax
            double precision dimension(ldabcd,*) :: abcd
            integer optional,check(shape(abcd,0)==ldabcd),depend(abcd) :: ldabcd=shape(abcd,0)
            integer :: ninfz
            integer dimension(*) :: infz
            integer dimension(*) :: kronl
            integer :: mu
            integer :: nu
            integer :: nkrol
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab08nx
        subroutine ab09ad(dico,job,equil,ordsel,n,m,p,nr,a,lda,b,ldb,c,ldc,hsv,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09AD.f
            character :: dico
            character :: job
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: hsv
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09ad
        subroutine ab09ax(dico,job,ordsel,n,m,p,nr,a,lda,b,ldb,c,ldc,hsv,t,ldt,ti,ldti,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09AX.f
            character :: dico
            character :: job
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: hsv
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldti,*) :: ti
            integer optional,check(shape(ti,0)==ldti),depend(ti) :: ldti=shape(ti,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09ax
        subroutine ab09bd(dico,job,equil,ordsel,n,m,p,nr,a,lda,b,ldb,c,ldc,d,ldd,hsv,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09BD.f
            character :: dico
            character :: job
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09bd
        subroutine ab09bx(dico,job,ordsel,n,m,p,nr,a,lda,b,ldb,c,ldc,d,ldd,hsv,t,ldt,ti,ldti,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09BX.f
            character :: dico
            character :: job
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(*) :: hsv
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldti,*) :: ti
            integer optional,check(shape(ti,0)==ldti),depend(ti) :: ldti=shape(ti,0)
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09bx
        subroutine ab09cd(dico,equil,ordsel,n,m,p,nr,a,lda,b,ldb,c,ldc,d,ldd,hsv,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09CD.f
            character :: dico
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09cd
        subroutine ab09cx(dico,ordsel,n,m,p,nr,a,lda,b,ldb,c,ldc,d,ldd,hsv,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09CX.f
            character :: dico
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09cx
        subroutine ab09dd(dico,n,m,p,nr,a,lda,b,ldb,c,ldc,d,ldd,rcond,iwork,dwork,info) ! in :slicot:AB09DD.f
            character :: dico
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: rcond
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine ab09dd
        subroutine ab09ed(dico,equil,ordsel,n,m,p,nr,alpha,a,lda,b,ldb,c,ldc,d,ldd,ns,hsv,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09ED.f
            character :: dico
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: ns
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09ed
        subroutine ab09fd(dico,jobcf,fact,jobmr,equil,ordsel,n,m,p,nr,alpha,a,lda,b,ldb,c,ldc,nq,hsv,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09FD.f
            character :: dico
            character :: jobcf
            character :: fact
            character :: jobmr
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: nq
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09fd
        subroutine ab09gd(dico,jobcf,fact,jobmr,equil,ordsel,n,m,p,nr,alpha,a,lda,b,ldb,c,ldc,d,ldd,nq,hsv,tol1,tol2,tol3,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09GD.f
            character :: dico
            character :: jobcf
            character :: fact
            character :: jobmr
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nq
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            double precision :: tol3
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09gd
        subroutine ab09md(dico,job,equil,ordsel,n,m,p,nr,alpha,a,lda,b,ldb,c,ldc,ns,hsv,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09MD.f
            character :: dico
            character :: job
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: ns
            double precision dimension(*) :: hsv
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09md
        subroutine ab09nd(dico,job,equil,ordsel,n,m,p,nr,alpha,a,lda,b,ldb,c,ldc,d,ldd,ns,hsv,tol1,tol2,iwork,dwork,ldwork,iwarn,info) ! in :slicot:AB09ND.f
            character :: dico
            character :: job
            character :: equil
            character :: ordsel
            integer :: n
            integer :: m
            integer :: p
            integer :: nr
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: ns
            double precision dimension(*) :: hsv
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ab09nd
        function ab13ad(dico,equil,n,m,p,alpha,a,lda,b,ldb,c,ldc,ns,hsv,dwork,ldwork,info) ! in :slicot:AB13AD.f
            character :: dico
            character :: equil
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: ns
            double precision dimension(*) :: hsv
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
            double precision :: ab13ad
        end function ab13ad
        function ab13ax(dico,n,m,p,a,lda,b,ldb,c,ldc,hsv,dwork,ldwork,info) ! in :slicot:AB13AX.f
            character :: dico
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: hsv
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
            double precision :: ab13ax
        end function ab13ax
        function ab13bd(dico,jobn,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,nq,tol,dwork,ldwork,iwarn,info) ! in :slicot:AB13BD.f
            character :: dico
            character :: jobn
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nq
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
            double precision :: ab13bd
        end function ab13bd
        function ab13cd(n,m,np,a,lda,b,ldb,c,ldc,d,ldd,tol,iwork,dwork,ldwork,cwork,lcwork,bwork,info) ! in :slicot:AB13CD.f
            integer :: n
            integer :: m
            integer :: np
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            complex*16 dimension(*) :: cwork
            integer :: lcwork
            logical dimension(*) :: bwork
            integer :: info
            double precision :: ab13cd
        end function ab13cd
        subroutine ab13ed(n,a,lda,low,high,tol,dwork,ldwork,info) ! in :slicot:AB13ED.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: low
            double precision :: high
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ab13ed
        subroutine ab13fd(n,a,lda,beta,omega,tol,dwork,ldwork,cwork,lcwork,info) ! in :slicot:AB13FD.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: beta
            double precision :: omega
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            complex*16 dimension(*) :: cwork
            integer :: lcwork
            integer :: info
        end subroutine ab13fd
        subroutine ag08bd(equil,l,n,m,p,a,lda,e,lde,b,ldb,c,ldc,d,ldd,nfz,nrank,niz,dinfz,nkror,ninfe,nkrol,infz,kronr,infe,kronl,tol,iwork,dwork,ldwork,info) ! in :slicot:AG08BD.f
            character :: equil
            integer :: l
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nfz
            integer :: nrank
            integer :: niz
            integer :: dinfz
            integer :: nkror
            integer :: ninfe
            integer :: nkrol
            integer dimension(*) :: infz
            integer dimension(*) :: kronr
            integer dimension(*) :: infe
            integer dimension(*) :: kronl
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine ag08bd
        subroutine ag08by(first,n,m,p,svlmax,abcd,ldabcd,e,lde,nr,pr,ninfz,dinfz,nkronl,infz,kronl,tol,iwork,dwork,info) ! in :slicot:AG08BY.f
            logical :: first
            integer :: n
            integer :: m
            integer :: p
            double precision :: svlmax
            double precision dimension(ldabcd,*) :: abcd
            integer optional,check(shape(abcd,0)==ldabcd),depend(abcd) :: ldabcd=shape(abcd,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            integer :: nr
            integer :: pr
            integer :: ninfz
            integer :: dinfz
            integer :: nkronl
            integer dimension(*) :: infz
            integer dimension(*) :: kronl
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine ag08by
        subroutine bb01ad(def,nr,dpar,ipar,bpar,chpar,vec,n,m,p,a,lda,b,ldb,c,ldc,g,ldg,q,ldq,x,ldx,dwork,ldwork,info) ! in :slicot:BB01AD.f
            character :: def
            integer dimension(2) :: nr
            double precision dimension(*) :: dpar
            integer dimension(3) :: ipar
            logical dimension(6) :: bpar
            character*255 :: chpar
            logical dimension(9) :: vec
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: g
            integer :: ldg
            double precision dimension(*) :: q
            integer :: ldq
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine bb01ad
        subroutine bb02ad(def,nr,dpar,ipar,bpar,chpar,vec,n,m,p,a,lda,b,ldb,c,ldc,q,ldq,r,ldr,s,lds,x,ldx,dwork,ldwork,info) ! in :slicot:BB02AD.f
            character :: def
            integer dimension(2) :: nr
            double precision dimension(*) :: dpar
            integer dimension(3) :: ipar
            logical dimension(7) :: bpar
            character*255 :: chpar
            logical dimension(10) :: vec
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: q
            integer :: ldq
            double precision dimension(*) :: r
            integer :: ldr
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine bb02ad
        subroutine bb03ad(def,nr,dpar,ipar,vec,n,m,e,lde,a,lda,y,ldy,b,ldb,x,ldx,u,ldu,note,dwork,ldwork,info) ! in :slicot:BB03AD.f
            character :: def
            integer dimension(*) :: nr
            double precision dimension(*) :: dpar
            integer dimension(*) :: ipar
            logical dimension(8) :: vec
            integer :: n
            integer :: m
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            character*70 :: note
            double precision dimension(ldwork) :: dwork
            integer optional,check(len(dwork)>=ldwork),depend(dwork) :: ldwork=len(dwork)
            integer :: info
        end subroutine bb03ad
        subroutine bb04ad(def,nr,dpar,ipar,vec,n,m,e,lde,a,lda,y,ldy,b,ldb,x,ldx,u,ldu,note,dwork,ldwork,info) ! in :slicot:BB04AD.f
            character :: def
            integer dimension(*) :: nr
            double precision dimension(*) :: dpar
            integer dimension(*) :: ipar
            logical dimension(8) :: vec
            integer :: n
            integer :: m
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            character*70 :: note
            double precision dimension(ldwork) :: dwork
            integer optional,check(len(dwork)>=ldwork),depend(dwork) :: ldwork=len(dwork)
            integer :: info
        end subroutine bb04ad
        subroutine bd01ad(def,nr,dpar,ipar,vec,n,m,p,e,lde,a,lda,b,ldb,c,ldc,d,ldd,note,dwork,ldwork,info) ! in :slicot:BD01AD.f
            character :: def
            integer dimension(*) :: nr
            double precision dimension(*) :: dpar
            integer dimension(*) :: ipar
            logical dimension(8) :: vec
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            character*70 :: note
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine bd01ad
        subroutine bd02ad(def,nr,dpar,ipar,vec,n,m,p,e,lde,a,lda,b,ldb,c,ldc,d,ldd,note,dwork,ldwork,info) ! in :slicot:BD02AD.f
            character :: def
            integer dimension(*) :: nr
            double precision dimension(*) :: dpar
            integer dimension(*) :: ipar
            logical dimension(8) :: vec
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            character*70 :: note
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine bd02ad
        subroutine de01od(conv,n,a,b,info) ! in :slicot:DE01OD.f
            character*1 :: conv
            integer :: n
            double precision dimension(*) :: a
            double precision dimension(*) :: b
            integer :: info
        end subroutine de01od
        subroutine df01md(sico,n,dt,a,dwork,info) ! in :slicot:DF01MD.f
            character*1 :: sico
            integer :: n
            double precision :: dt
            double precision dimension(*) :: a
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine df01md
        subroutine dg01md(indi,n,xr,xi,info) ! in :slicot:DG01MD.f
            character*1 :: indi
            integer :: n
            double precision dimension(*) :: xr
            double precision dimension(*) :: xi
            integer :: info
        end subroutine dg01md
        subroutine dg01nd(indi,n,xr,xi,info) ! in :slicot:DG01ND.f
            character*1 :: indi
            integer :: n
            double precision dimension(*) :: xr
            double precision dimension(*) :: xi
            integer :: info
        end subroutine dg01nd
        subroutine dg01ny(indi,n,xr,xi) ! in :slicot:DG01NY.f
            character*1 :: indi
            integer :: n
            double precision dimension(*) :: xr
            double precision dimension(*) :: xi
        end subroutine dg01ny
        subroutine dk01md(type_bn,n,a,info) ! in :slicot:DK01MD.f
            character*1 :: type_bn
            integer :: n
            double precision dimension(*) :: a
            integer :: info
        end subroutine dk01md
        subroutine fb01qd(jobk,multbq,n,m,p,s,lds,a,lda,b,ldb,q,ldq,c,ldc,r,ldr,k,ldk,tol,iwork,dwork,ldwork,info) ! in :slicot:FB01QD.f
            character*1 :: jobk
            character*1 :: multbq
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine fb01qd
        subroutine fb01rd(jobk,multbq,n,m,p,s,lds,a,lda,b,ldb,q,ldq,c,ldc,r,ldr,k,ldk,tol,iwork,dwork,ldwork,info) ! in :slicot:FB01RD.f
            character*1 :: jobk
            character*1 :: multbq
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine fb01rd
        subroutine fb01sd(jobx,multab,multrc,n,m,p,sinv,ldsinv,ainv,ldainv,b,ldb,rinv,ldrinv,c,ldc,qinv,ldqinv,x,rinvy,z,e,tol,iwork,dwork,ldwork,info) ! in :slicot:FB01SD.f
            character*1 :: jobx
            character*1 :: multab
            character*1 :: multrc
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(ldsinv,*) :: sinv
            integer optional,check(shape(sinv,0)==ldsinv),depend(sinv) :: ldsinv=shape(sinv,0)
            double precision dimension(ldainv,*) :: ainv
            integer optional,check(shape(ainv,0)==ldainv),depend(ainv) :: ldainv=shape(ainv,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldrinv,*) :: rinv
            integer optional,check(shape(rinv,0)==ldrinv),depend(rinv) :: ldrinv=shape(rinv,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldqinv,*) :: qinv
            integer optional,check(shape(qinv,0)==ldqinv),depend(qinv) :: ldqinv=shape(qinv,0)
            double precision dimension(*) :: x
            double precision dimension(*) :: rinvy
            double precision dimension(*) :: z
            double precision dimension(*) :: e
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine fb01sd
        subroutine fb01td(jobx,multrc,n,m,p,sinv,ldsinv,ainv,ldainv,ainvb,ldainb,rinv,ldrinv,c,ldc,qinv,ldqinv,x,rinvy,z,e,tol,iwork,dwork,ldwork,info) ! in :slicot:FB01TD.f
            character*1 :: jobx
            character*1 :: multrc
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(ldsinv,*) :: sinv
            integer optional,check(shape(sinv,0)==ldsinv),depend(sinv) :: ldsinv=shape(sinv,0)
            double precision dimension(ldainv,*) :: ainv
            integer optional,check(shape(ainv,0)==ldainv),depend(ainv) :: ldainv=shape(ainv,0)
            double precision dimension(ldainb,*) :: ainvb
            integer optional,check(shape(ainvb,0)==ldainb),depend(ainvb) :: ldainb=shape(ainvb,0)
            double precision dimension(ldrinv,*) :: rinv
            integer optional,check(shape(rinv,0)==ldrinv),depend(rinv) :: ldrinv=shape(rinv,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldqinv,*) :: qinv
            integer optional,check(shape(qinv,0)==ldqinv),depend(qinv) :: ldqinv=shape(qinv,0)
            double precision dimension(*) :: x
            double precision dimension(*) :: rinvy
            double precision dimension(*) :: z
            double precision dimension(*) :: e
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine fb01td
        subroutine fb01vd(n,m,l,p,ldp,a,lda,b,ldb,c,ldc,q,ldq,r,ldr,k,ldk,tol,iwork,dwork,ldwork,info) ! in :slicot:FB01VD.f
            integer :: n
            integer :: m
            integer :: l
            double precision dimension(ldp,*) :: p
            integer optional,check(shape(p,0)==ldp),depend(p) :: ldp=shape(p,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine fb01vd
        subroutine fd01ad(jp,l,lambda,xin,yin,efor,xf,epsbck,cteta,steta,yq,epos,eout,salph,iwarn,info) ! in :slicot:FD01AD.f
            character :: jp
            integer :: l
            double precision :: lambda
            double precision :: xin
            double precision :: yin
            double precision :: efor
            double precision dimension(*) :: xf
            double precision dimension(*) :: epsbck
            double precision dimension(*) :: cteta
            double precision dimension(*) :: steta
            double precision dimension(*) :: yq
            double precision :: epos
            double precision :: eout
            double precision dimension(*) :: salph
            integer :: iwarn
            integer :: info
        end subroutine fd01ad
        subroutine ib01ad(meth,alg,jobd,batch,conct,ctrl,nobr,m,l,nsmp,u,ldu,y,ldy,n,r,ldr,sv,rcond,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01AD.f
            character :: meth
            character :: alg
            character :: jobd
            character :: batch
            character :: conct
            character :: ctrl
            integer :: nobr
            integer :: m
            integer :: l
            integer :: nsmp
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            integer :: n
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(*) :: sv
            double precision :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01ad
        subroutine ib01bd(meth,job,jobck,nobr,n,m,l,nsmpl,r,ldr,a,lda,c,ldc,b,ldb,d,ldd,q,ldq,ry,ldry,s,lds,k,ldk,tol,iwork,dwork,ldwork,bwork,iwarn,info) ! in :slicot:IB01BD.f
            character :: meth
            character :: job
            character :: jobck
            integer :: nobr
            integer :: n
            integer :: m
            integer :: l
            integer :: nsmpl
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldry,*) :: ry
            integer optional,check(shape(ry,0)==ldry),depend(ry) :: ldry=shape(ry,0)
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: iwarn
            integer :: info
        end subroutine ib01bd
        subroutine ib01cd(jobx0,comuse,job,n,m,l,nsmp,a,lda,b,ldb,c,ldc,d,ldd,u,ldu,y,ldy,x0,v,ldv,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01CD.f
            character :: jobx0
            character :: comuse
            character :: job
            integer :: n
            integer :: m
            integer :: l
            integer :: nsmp
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: x0
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01cd
        subroutine ib01md(meth,alg,batch,conct,nobr,m,l,nsmp,u,ldu,y,ldy,r,ldr,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01MD.f
            character :: meth
            character :: alg
            character :: batch
            character :: conct
            integer :: nobr
            integer :: m
            integer :: l
            integer :: nsmp
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01md
        subroutine ib01my(meth,batch,conct,nobr,m,l,nsmp,u,ldu,y,ldy,r,ldr,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01MY.f
            character :: meth
            character :: batch
            character :: conct
            integer :: nobr
            integer :: m
            integer :: l
            integer :: nsmp
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01my
        subroutine ib01nd(meth,jobd,nobr,m,l,r,ldr,sv,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01ND.f
            character :: meth
            character :: jobd
            integer :: nobr
            integer :: m
            integer :: l
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(*) :: sv
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01nd
        subroutine ib01od(ctrl,nobr,l,sv,n,tol,iwarn,info) ! in :slicot:IB01OD.f
            character :: ctrl
            integer :: nobr
            integer :: l
            double precision dimension(*) :: sv
            integer :: n
            double precision :: tol
            integer :: iwarn
            integer :: info
        end subroutine ib01od
        subroutine ib01oy(ns,nmax,n,sv,info) ! in :slicot:IB01OY.f
            integer :: ns
            integer :: nmax
            integer :: n
            double precision dimension(*) :: sv
            integer :: info
        end subroutine ib01oy
        subroutine ib01pd(meth,job,jobcv,nobr,n,m,l,nsmpl,r,ldr,a,lda,c,ldc,b,ldb,d,ldd,q,ldq,ry,ldry,s,lds,o,ldo,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01PD.f
            character :: meth
            character :: job
            character :: jobcv
            integer :: nobr
            integer :: n
            integer :: m
            integer :: l
            integer :: nsmpl
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldry,*) :: ry
            integer optional,check(shape(ry,0)==ldry),depend(ry) :: ldry=shape(ry,0)
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldo,*) :: o
            integer optional,check(shape(o,0)==ldo),depend(o) :: ldo=shape(o,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01pd
        subroutine ib01px(job,nobr,n,m,l,uf,lduf,un,ldun,ul,ldul,pgal,ldpgal,k,ldk,r,ldr,x,b,ldb,d,ldd,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01PX.f
            character :: job
            integer :: nobr
            integer :: n
            integer :: m
            integer :: l
            double precision dimension(lduf,*) :: uf
            integer optional,check(shape(uf,0)==lduf),depend(uf) :: lduf=shape(uf,0)
            double precision dimension(ldun,*) :: un
            integer optional,check(shape(un,0)==ldun),depend(un) :: ldun=shape(un,0)
            double precision dimension(ldul,*) :: ul
            integer optional,check(shape(ul,0)==ldul),depend(ul) :: ldul=shape(ul,0)
            double precision dimension(ldpgal,*) :: pgal
            integer optional,check(shape(pgal,0)==ldpgal),depend(pgal) :: ldpgal=shape(pgal,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(*) :: x
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01px
        subroutine ib01py(meth,job,nobr,n,m,l,rankr1,ul,ldul,r1,ldr1,tau1,pgal,ldpgal,k,ldk,r,ldr,h,ldh,b,ldb,d,ldd,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01PY.f
            character :: meth
            character :: job
            integer :: nobr
            integer :: n
            integer :: m
            integer :: l
            integer :: rankr1
            double precision dimension(ldul,*) :: ul
            integer optional,check(shape(ul,0)==ldul),depend(ul) :: ldul=shape(ul,0)
            double precision dimension(ldr1,*) :: r1
            integer optional,check(shape(r1,0)==ldr1),depend(r1) :: ldr1=shape(r1,0)
            double precision dimension(*) :: tau1
            double precision dimension(ldpgal,*) :: pgal
            integer optional,check(shape(pgal,0)==ldpgal),depend(pgal) :: ldpgal=shape(pgal,0)
            double precision dimension(ldk,*) :: k
            integer optional,check(shape(k,0)==ldk),depend(k) :: ldk=shape(k,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01py
        subroutine ib01qd(jobx0,job,n,m,l,nsmp,a,lda,c,ldc,u,ldu,y,ldy,x0,b,ldb,d,ldd,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01QD.f
            character :: jobx0
            character :: job
            integer :: n
            integer :: m
            integer :: l
            integer :: nsmp
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: x0
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01qd
        subroutine ib01rd(job,n,m,l,nsmp,a,lda,b,ldb,c,ldc,d,ldd,u,ldu,y,ldy,x0,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:IB01RD.f
            character :: job
            integer :: n
            integer :: m
            integer :: l
            integer :: nsmp
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: x0
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine ib01rd
        subroutine ma01ad(xr,xi,yr,yi) ! in :slicot:MA01AD.f
            double precision :: xr
            double precision :: xi
            double precision :: yr
            double precision :: yi
        end subroutine ma01ad
        subroutine ma02ad(job,m,n,a,lda,b,ldb) ! in :slicot:MA02AD.f
            character :: job
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
        end subroutine ma02ad
        subroutine ma02bd(side,m,n,a,lda) ! in :slicot:MA02BD.f
            character :: side
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
        end subroutine ma02bd
        subroutine ma02cd(n,kl,ku,a,lda) ! in :slicot:MA02CD.f
            integer :: n
            integer :: kl
            integer :: ku
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
        end subroutine ma02cd
        subroutine ma02dd(job,uplo,n,a,lda,ap) ! in :slicot:MA02DD.f
            character :: job
            character :: uplo
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: ap
        end subroutine ma02dd
        subroutine ma02ed(uplo,n,a,lda) ! in :slicot:MA02ED.f
            character :: uplo
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
        end subroutine ma02ed
        subroutine ma02fd(x1,x2,c,s,info) ! in :slicot:MA02FD.f
            double precision :: x1
            double precision :: x2
            double precision :: c
            double precision :: s
            integer :: info
        end subroutine ma02fd
        subroutine ma02gd(n,a,lda,k1,k2,ipiv,incx) ! in :slicot:MA02GD.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: k1
            integer :: k2
            integer dimension(*) :: ipiv
            integer :: incx
        end subroutine ma02gd
        subroutine mb01pd(scun,type_bn,m,n,kl,ku,anrm,nbl,nrows,a,lda,info) ! in :slicot:MB01PD.f
            character*1 :: scun
            character*1 :: type_bn
            integer :: m
            integer :: n
            integer :: kl
            integer :: ku
            double precision :: anrm
            integer :: nbl
            integer dimension(*) :: nrows
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: info
        end subroutine mb01pd
        subroutine mb01qd(type_bn,m,n,kl,ku,cfrom,cto,nbl,nrows,a,lda,info) ! in :slicot:MB01QD.f
            character :: type_bn
            integer :: m
            integer :: n
            integer :: kl
            integer :: ku
            double precision :: cfrom
            double precision :: cto
            integer :: nbl
            integer dimension(*) :: nrows
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: info
        end subroutine mb01qd
        subroutine mb01rd(uplo,trans,m,n,alpha,beta,r,ldr,a,lda,x,ldx,dwork,ldwork,info) ! in :slicot:MB01RD.f
            character*1 :: uplo
            character*1 :: trans
            integer :: m
            integer :: n
            double precision :: alpha
            double precision :: beta
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb01rd
        subroutine mb01ru(uplo,trans,m,n,alpha,beta,r,ldr,a,lda,x,ldx,dwork,ldwork,info) ! in :slicot:MB01RU.f
            character :: uplo
            character :: trans
            integer :: m
            integer :: n
            double precision :: alpha
            double precision :: beta
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb01ru
        subroutine mb01rw(uplo,trans,m,n,a,lda,z,ldz,dwork,info) ! in :slicot:MB01RW.f
            character*1 :: uplo
            character*1 :: trans
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb01rw
        subroutine mb01rx(side,uplo,trans,m,n,alpha,beta,r,ldr,a,lda,b,ldb,info) ! in :slicot:MB01RX.f
            character :: side
            character :: uplo
            character :: trans
            integer :: m
            integer :: n
            double precision :: alpha
            double precision :: beta
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer :: info
        end subroutine mb01rx
        subroutine mb01ry(side,uplo,trans,m,alpha,beta,r,ldr,h,ldh,b,ldb,dwork,info) ! in :slicot:MB01RY.f
            character :: side
            character :: uplo
            character :: trans
            integer :: m
            double precision :: alpha
            double precision :: beta
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb01ry
        subroutine mb01sd(jobs,m,n,a,lda,r,c) ! in :slicot:MB01SD.f
            character :: jobs
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: r
            double precision dimension(*) :: c
        end subroutine mb01sd
        subroutine mb01td(n,a,lda,b,ldb,dwork,info) ! in :slicot:MB01TD.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb01td
        subroutine mb01ud(side,trans,m,n,alpha,h,ldh,a,lda,b,ldb,info) ! in :slicot:MB01UD.f
            character :: side
            character :: trans
            integer :: m
            integer :: n
            double precision :: alpha
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer :: info
        end subroutine mb01ud
        subroutine mb01uw(side,trans,m,n,alpha,h,ldh,a,lda,dwork,ldwork,info) ! in :slicot:MB01UW.f
            character :: side
            character :: trans
            integer :: m
            integer :: n
            double precision :: alpha
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb01uw
        subroutine mb01vd(trana,tranb,ma,na,mb,nb,alpha,beta,a,lda,b,ldb,c,ldc,mc,nc,info) ! in :slicot:MB01VD.f
            character :: trana
            character :: tranb
            integer :: ma
            integer :: na
            integer :: mb
            integer :: nb
            double precision :: alpha
            double precision :: beta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: mc
            integer :: nc
            integer :: info
        end subroutine mb01vd
        subroutine mb02md(job,m,n,l,rank_bn,c,ldc,s,x,ldx,tol,iwork,dwork,ldwork,iwarn,info) ! in :slicot:MB02MD.f
            character*1 :: job
            integer :: m
            integer :: n
            integer :: l
            integer :: rank_bn
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: s
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine mb02md
        subroutine mb02nd(m,n,l,rank_bn,theta,c,ldc,x,ldx,q,inul,tol,reltol,iwork,dwork,ldwork,bwork,iwarn,info) ! in :slicot:MB02ND.f
            integer :: m
            integer :: n
            integer :: l
            integer :: rank_bn
            double precision :: theta
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: q
            logical dimension(*) :: inul
            double precision :: tol
            double precision :: reltol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: iwarn
            integer :: info
        end subroutine mb02nd
        subroutine mb02ny(updatu,updatv,m,n,i,k,q,e,u,ldu,v,ldv,dwork) ! in :slicot:MB02NY.f
            logical :: updatu
            logical :: updatv
            integer :: m
            integer :: n
            integer :: i
            integer :: k
            double precision dimension(*) :: q
            double precision dimension(*) :: e
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision dimension(*) :: dwork
        end subroutine mb02ny
        subroutine mb02od(side,uplo,trans,diag,norm,m,n,alpha,a,lda,b,ldb,rcond,tol,iwork,dwork,info) ! in :slicot:MB02OD.f
            character*1 :: side
            character*1 :: uplo
            character*1 :: trans
            character*1 :: diag
            character*1 :: norm
            integer :: m
            integer :: n
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb02od
        subroutine mb02pd(fact,trans,n,nrhs,a,lda,af,ldaf,ipiv,equed,r,c,b,ldb,x,ldx,rcond,ferr,berr,iwork,dwork,info) ! in :slicot:MB02PD.f
            character :: fact
            character :: trans
            integer :: n
            integer :: nrhs
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldaf,*) :: af
            integer optional,check(shape(af,0)==ldaf),depend(af) :: ldaf=shape(af,0)
            integer dimension(*) :: ipiv
            character :: equed
            double precision dimension(*) :: r
            double precision dimension(*) :: c
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: rcond
            double precision dimension(*) :: ferr
            double precision dimension(*) :: berr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb02pd
        subroutine mb02qd(job,iniper,m,n,nrhs,rcond,svlmax,a,lda,b,ldb,y,jpvt,rank_bn,sval,dwork,info) ! in :slicot:MB02QD.f
            character :: job
            character :: iniper
            integer :: m
            integer :: n
            integer :: nrhs
            double precision :: rcond
            double precision :: svlmax
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: y
            integer dimension(*) :: jpvt
            integer :: rank_bn
            double precision dimension(3) :: sval
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb02qd
        subroutine mb02qy(m,n,nrhs,rank_bn,a,lda,jpvt,b,ldb,tau,dwork,ldwork,info) ! in :slicot:MB02QY.f
            integer :: m
            integer :: n
            integer :: nrhs
            integer :: rank_bn
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer dimension(*) :: jpvt
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb02qy
        subroutine mb02rd(trans,n,nrhs,h,ldh,ipiv,b,ldb,info) ! in :slicot:MB02RD.f
            character :: trans
            integer :: n
            integer :: nrhs
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer dimension(*) :: ipiv
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer :: info
        end subroutine mb02rd
        subroutine mb02rz(trans,n,nrhs,h,ldh,ipiv,b,ldb,info) ! in :slicot:MB02RZ.f
            character :: trans
            integer :: n
            integer :: nrhs
            complex*16 dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer dimension(*) :: ipiv
            complex*16 dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer :: info
        end subroutine mb02rz
        subroutine mb02sd(n,h,ldh,ipiv,info) ! in :slicot:MB02SD.f
            integer :: n
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer dimension(*) :: ipiv
            integer :: info
        end subroutine mb02sd
        subroutine mb02sz(n,h,ldh,ipiv,info) ! in :slicot:MB02SZ.f
            integer :: n
            complex*16 dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer dimension(*) :: ipiv
            integer :: info
        end subroutine mb02sz
        subroutine mb02td(norm,n,hnorm,h,ldh,ipiv,rcond,iwork,dwork,info) ! in :slicot:MB02TD.f
            character :: norm
            integer :: n
            double precision :: hnorm
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer dimension(*) :: ipiv
            double precision :: rcond
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb02td
        subroutine mb02tz(norm,n,hnorm,h,ldh,ipiv,rcond,dwork,zwork,info) ! in :slicot:MB02TZ.f
            character :: norm
            integer :: n
            double precision :: hnorm
            complex*16 dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer dimension(*) :: ipiv
            double precision :: rcond
            double precision dimension(*) :: dwork
            complex*16 dimension(*) :: zwork
            integer :: info
        end subroutine mb02tz
        subroutine mb02ud(fact,side,trans,jobp,m,n,alpha,rcond,rank_bn,r,ldr,q,ldq,sv,b,ldb,rp,ldrp,dwork,ldwork,info) ! in :slicot:MB02UD.f
            character :: fact
            character :: side
            character :: trans
            character :: jobp
            integer :: m
            integer :: n
            double precision :: alpha
            double precision :: rcond
            integer :: rank_bn
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(*) :: sv
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldrp,*) :: rp
            integer optional,check(shape(rp,0)==ldrp),depend(rp) :: ldrp=shape(rp,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb02ud
        subroutine mb02uu(n,a,lda,rhs,ipiv,jpiv,scale) ! in :slicot:MB02UU.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: rhs
            integer dimension(*) :: ipiv
            integer dimension(*) :: jpiv
            double precision :: scale
        end subroutine mb02uu
        subroutine mb02uv(n,a,lda,ipiv,jpiv,info) ! in :slicot:MB02UV.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer dimension(*) :: ipiv
            integer dimension(*) :: jpiv
            integer :: info
        end subroutine mb02uv
        subroutine mb02vd(trans,m,n,a,lda,ipiv,b,ldb,info) ! in :slicot:MB02VD.f
            character :: trans
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer dimension(*) :: ipiv
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer :: info
        end subroutine mb02vd
        subroutine mb03md(n,l,theta,q,e,q2,e2,pivmin,tol,reltol,iwarn,info) ! in :slicot:MB03MD.f
            integer :: n
            integer :: l
            double precision :: theta
            double precision dimension(*) :: q
            double precision dimension(*) :: e
            double precision dimension(*) :: q2
            double precision dimension(*) :: e2
            double precision :: pivmin
            double precision :: tol
            double precision :: reltol
            integer :: iwarn
            integer :: info
        end subroutine mb03md
        function mb03my(nx,x,incx) ! in :slicot:MB03MY.f
            integer :: nx
            double precision dimension(*) :: x
            integer :: incx
            double precision :: mb03my
        end function mb03my
        function mb03nd(n,theta,q2,e2,pivmin,info) ! in :slicot:MB03ND.f
            integer :: n
            double precision :: theta
            double precision dimension(*) :: q2
            double precision dimension(*) :: e2
            double precision :: pivmin
            integer :: info
            integer :: mb03nd
        end function mb03nd
        function mb03ny(n,omega,a,lda,s,dwork,ldwork,cwork,lcwork,info) ! in :slicot:MB03NY.f
            integer :: n
            double precision :: omega
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: s
            double precision dimension(*) :: dwork
            integer :: ldwork
            complex*16 dimension(*) :: cwork
            integer :: lcwork
            integer :: info
            double precision :: mb03ny
        end function mb03ny
        subroutine mb03od(jobqr,m,n,a,lda,jpvt,rcond,svlmax,tau,rank_bn,sval,dwork,info) ! in :slicot:MB03OD.f
            character*1 :: jobqr
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer dimension(*) :: jpvt
            double precision :: rcond
            double precision :: svlmax
            double precision dimension(*) :: tau
            integer :: rank_bn
            double precision dimension(3) :: sval
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03od
        subroutine mb03oy(m,n,a,lda,rcond,svlmax,rank_bn,sval,jpvt,tau,dwork,info) ! in :slicot:MB03OY.f
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: rcond
            double precision :: svlmax
            integer :: rank_bn
            double precision dimension(3) :: sval
            integer dimension(*) :: jpvt
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03oy
        subroutine mb03pd(jobrq,m,n,a,lda,jpvt,rcond,svlmax,tau,rank_bn,sval,dwork,info) ! in :slicot:MB03PD.f
            character*1 :: jobrq
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer dimension(*) :: jpvt
            double precision :: rcond
            double precision :: svlmax
            double precision dimension(*) :: tau
            integer :: rank_bn
            double precision dimension(3) :: sval
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03pd
        subroutine mb03py(m,n,a,lda,rcond,svlmax,rank_bn,sval,jpvt,tau,dwork,info) ! in :slicot:MB03PY.f
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: rcond
            double precision :: svlmax
            integer :: rank_bn
            double precision dimension(3) :: sval
            integer dimension(*) :: jpvt
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03py
        subroutine mb03qd(dico,stdom,jobu,n,nlow,nsup,alpha,a,lda,u,ldu,ndim,dwork,info) ! in :slicot:MB03QD.f
            character :: dico
            character :: stdom
            character :: jobu
            integer :: n
            integer :: nlow
            integer :: nsup
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            integer :: ndim
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03qd
        subroutine mb03qx(n,t,ldt,wr,wi,info) ! in :slicot:MB03QX.f
            integer :: n
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer :: info
        end subroutine mb03qx
        subroutine mb03qy(n,l,a,lda,u,ldu,e1,e2,info) ! in :slicot:MB03QY.f
            integer :: n
            integer :: l
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision :: e1
            double precision :: e2
            integer :: info
        end subroutine mb03qy
        subroutine mb03rd(jobx,sort,n,pmax,a,lda,x,ldx,nblcks,blsize,wr,wi,tol,dwork,info) ! in :slicot:MB03RD.f
            character :: jobx
            character :: sort
            integer :: n
            double precision :: pmax
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            integer :: nblcks
            integer dimension(*) :: blsize
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03rd
        subroutine mb03rx(jobv,n,kl,ku,a,lda,x,ldx,wr,wi,dwork) ! in :slicot:MB03RX.f
            character :: jobv
            integer :: n
            integer :: kl
            integer :: ku
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
        end subroutine mb03rx
        subroutine mb03ry(m,n,pmax,a,lda,b,ldb,c,ldc,info) ! in :slicot:MB03RY.f
            integer :: m
            integer :: n
            double precision :: pmax
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: info
        end subroutine mb03ry
        subroutine mb03sd(jobscl,n,a,lda,qg,ldqg,wr,wi,dwork,ldwork,info) ! in :slicot:MB03SD.f
            character :: jobscl
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldqg,*) :: qg
            integer optional,check(shape(qg,0)==ldqg),depend(qg) :: ldqg=shape(qg,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb03sd
        subroutine mb03ud(jobq,jobp,n,a,lda,q,ldq,sv,dwork,ldwork,info) ! in :slicot:MB03UD.f
            character :: jobq
            character :: jobp
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(*) :: sv
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb03ud
        subroutine mb03vd(n,p,ilo,ihi,a,lda1,lda2,tau,ldtau,dwork,info) ! in :slicot:MB03VD.f
            integer :: n
            integer :: p
            integer :: ilo
            integer :: ihi
            double precision dimension(lda1,lda2,*) :: a
            integer optional,check(shape(a,0)==lda1),depend(a) :: lda1=shape(a,0)
            integer optional,check(shape(a,1)==lda2),depend(a) :: lda2=shape(a,1)
            double precision dimension(ldtau,*) :: tau
            integer optional,check(shape(tau,0)==ldtau),depend(tau) :: ldtau=shape(tau,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb03vd
        subroutine mb03vy(n,p,ilo,ihi,a,lda1,lda2,tau,ldtau,dwork,ldwork,info) ! in :slicot:MB03VY.f
            integer :: n
            integer :: p
            integer :: ilo
            integer :: ihi
            double precision dimension(lda1,lda2,*) :: a
            integer optional,check(shape(a,0)==lda1),depend(a) :: lda1=shape(a,0)
            integer optional,check(shape(a,1)==lda2),depend(a) :: lda2=shape(a,1)
            double precision dimension(ldtau,*) :: tau
            integer optional,check(shape(tau,0)==ldtau),depend(tau) :: ldtau=shape(tau,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb03vy
        subroutine mb03wd(job,compz,n,p,ilo,ihi,iloz,ihiz,h,ldh1,ldh2,z,ldz1,ldz2,wr,wi,dwork,ldwork,info) ! in :slicot:MB03WD.f
            character :: job
            character :: compz
            integer :: n
            integer :: p
            integer :: ilo
            integer :: ihi
            integer :: iloz
            integer :: ihiz
            double precision dimension(ldh1,ldh2,*) :: h
            integer optional,check(shape(h,0)==ldh1),depend(h) :: ldh1=shape(h,0)
            integer optional,check(shape(h,1)==ldh2),depend(h) :: ldh2=shape(h,1)
            double precision dimension(ldz1,ldz2,*) :: z
            integer optional,check(shape(z,0)==ldz1),depend(z) :: ldz1=shape(z,0)
            integer optional,check(shape(z,1)==ldz2),depend(z) :: ldz2=shape(z,1)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb03wd
        subroutine mb03wx(n,p,t,ldt1,ldt2,wr,wi,info) ! in :slicot:MB03WX.f
            integer :: n
            integer :: p
            double precision dimension(ldt1,ldt2,*) :: t
            integer optional,check(shape(t,0)==ldt1),depend(t) :: ldt1=shape(t,0)
            integer optional,check(shape(t,1)==ldt2),depend(t) :: ldt2=shape(t,1)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer :: info
        end subroutine mb03wx
        subroutine mb04dy(jobscl,n,a,lda,qg,ldqg,d,dwork,info) ! in :slicot:MB04DY.f
            character :: jobscl
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldqg,*) :: qg
            integer optional,check(shape(qg,0)==ldqg),depend(qg) :: ldqg=shape(qg,0)
            double precision dimension(*) :: d
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb04dy
        subroutine mb04gd(m,n,a,lda,jpvt,tau,dwork,info) ! in :slicot:MB04GD.f
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer dimension(*) :: jpvt
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb04gd
        subroutine mb04id(n,m,p,l,a,lda,b,ldb,tau,dwork,ldwork,info) ! in :slicot:MB04ID.f
            integer :: n
            integer :: m
            integer :: p
            integer :: l
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb04id
        subroutine mb04iy(side,trans,n,m,k,p,a,lda,tau,c,ldc,dwork,ldwork,info) ! in :slicot:MB04IY.f
            character :: side
            character :: trans
            integer :: n
            integer :: m
            integer :: k
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: tau
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb04iy
        subroutine mb04jd(n,m,p,l,a,lda,b,ldb,tau,dwork,ldwork,info) ! in :slicot:MB04JD.f
            integer :: n
            integer :: m
            integer :: p
            integer :: l
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb04jd
        subroutine mb04kd(uplo,n,m,p,r,ldr,a,lda,b,ldb,c,ldc,tau,dwork) ! in :slicot:MB04KD.f
            character*1 :: uplo
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
        end subroutine mb04kd
        subroutine mb04ld(uplo,n,m,p,l,ldl,a,lda,b,ldb,c,ldc,tau,dwork) ! in :slicot:MB04LD.f
            character*1 :: uplo
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(ldl,*) :: l
            integer optional,check(shape(l,0)==ldl),depend(l) :: ldl=shape(l,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
        end subroutine mb04ld
        subroutine mb04md(n,maxred,a,lda,scale,info) ! in :slicot:MB04MD.f
            integer :: n
            double precision :: maxred
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: scale
            integer :: info
        end subroutine mb04md
        subroutine mb04nd(uplo,n,m,p,r,ldr,a,lda,b,ldb,c,ldc,tau,dwork) ! in :slicot:MB04ND.f
            character :: uplo
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
        end subroutine mb04nd
        subroutine mb04ny(m,n,v,incv,tau,a,lda,b,ldb,dwork) ! in :slicot:MB04NY.f
            integer :: m
            integer :: n
            double precision dimension(*) :: v
            integer :: incv
            double precision :: tau
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: dwork
        end subroutine mb04ny
        subroutine mb04od(uplo,n,m,p,r,ldr,a,lda,b,ldb,c,ldc,tau,dwork) ! in :slicot:MB04OD.f
            character*1 :: uplo
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: tau
            double precision dimension(*) :: dwork
        end subroutine mb04od
        subroutine mb04ox(n,a,lda,x,incx) ! in :slicot:MB04OX.f
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: x
            integer :: incx
        end subroutine mb04ox
        subroutine mb04oy(m,n,v,tau,a,lda,b,ldb,dwork) ! in :slicot:MB04OY.f
            integer :: m
            integer :: n
            double precision dimension(*) :: v
            double precision :: tau
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: dwork
        end subroutine mb04oy
        subroutine mb04py(side,m,n,v,tau,c,ldc,dwork) ! in :slicot:MB04PY.f
            character :: side
            integer :: m
            integer :: n
            double precision dimension(*) :: v
            double precision :: tau
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: dwork
        end subroutine mb04py
        subroutine mb04tt(updatq,updatz,m,n,ifira,ifica,nca,a,lda,e,lde,q,ldq,z,ldz,istair,rank_bn,tol,iwork) ! in :slicot:MB04TT.f
            logical :: updatq
            logical :: updatz
            integer :: m
            integer :: n
            integer :: ifira
            integer :: ifica
            integer :: nca
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer dimension(*) :: istair
            integer :: rank_bn
            double precision :: tol
            integer dimension(*) :: iwork
        end subroutine mb04tt
        subroutine mb04tu(n,x,incx,y,incy,c,s) ! in :slicot:MB04TU.f
            integer :: n
            double precision dimension(*) :: x
            integer :: incx
            double precision dimension(*) :: y
            integer :: incy
            double precision :: c
            double precision :: s
        end subroutine mb04tu
        subroutine mb04tv(updatz,n,nra,nca,ifira,ifica,a,lda,e,lde,z,ldz) ! in :slicot:MB04TV.f
            logical :: updatz
            integer :: n
            integer :: nra
            integer :: nca
            integer :: ifira
            integer :: ifica
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
        end subroutine mb04tv
        subroutine mb04tw(updatq,m,n,nre,nce,ifire,ifice,ifica,a,lda,e,lde,q,ldq) ! in :slicot:MB04TW.f
            logical :: updatq
            integer :: m
            integer :: n
            integer :: nre
            integer :: nce
            integer :: ifire
            integer :: ifice
            integer :: ifica
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
        end subroutine mb04tw
        subroutine mb04tx(updatq,updatz,m,n,nblcks,inuk,imuk,a,lda,e,lde,q,ldq,z,ldz,mnei) ! in :slicot:MB04TX.f
            logical :: updatq
            logical :: updatz
            integer :: m
            integer :: n
            integer :: nblcks
            integer dimension(*) :: inuk
            integer dimension(*) :: imuk
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer dimension(4) :: mnei
        end subroutine mb04tx
        subroutine mb04ty(updatq,updatz,m,n,nblcks,inuk,imuk,a,lda,e,lde,q,ldq,z,ldz,info) ! in :slicot:MB04TY.f
            logical :: updatq
            logical :: updatz
            integer :: m
            integer :: n
            integer :: nblcks
            integer dimension(*) :: inuk
            integer dimension(*) :: imuk
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: info
        end subroutine mb04ty
        subroutine mb04ud(jobq,jobz,m,n,a,lda,e,lde,q,ldq,z,ldz,ranke,istair,tol,dwork,info) ! in :slicot:MB04UD.f
            character*1 :: jobq
            character*1 :: jobz
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: ranke
            integer dimension(*) :: istair
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb04ud
        subroutine mb04vd(mode,jobq,jobz,m,n,ranke,a,lda,e,lde,q,ldq,z,ldz,istair,nblcks,nblcki,imuk,inuk,imuk0,mnei,tol,iwork,info) ! in :slicot:MB04VD.f
            character*1 :: mode
            character*1 :: jobq
            character*1 :: jobz
            integer :: m
            integer :: n
            integer :: ranke
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer dimension(*) :: istair
            integer :: nblcks
            integer :: nblcki
            integer dimension(*) :: imuk
            integer dimension(*) :: inuk
            integer dimension(*) :: imuk0
            integer dimension(*) :: mnei
            double precision :: tol
            integer dimension(*) :: iwork
            integer :: info
        end subroutine mb04vd
        subroutine mb04vx(updatq,updatz,m,n,nblcks,inuk,imuk,a,lda,e,lde,q,ldq,z,ldz,mnei) ! in :slicot:MB04VX.f
            logical :: updatq
            logical :: updatz
            integer :: m
            integer :: n
            integer :: nblcks
            integer dimension(*) :: inuk
            integer dimension(*) :: imuk
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer dimension(3) :: mnei
        end subroutine mb04vx
        subroutine mb04xd(jobu,jobv,m,n,rank_bn,theta,a,lda,u,ldu,v,ldv,q,inul,tol,reltol,dwork,ldwork,iwarn,info) ! in :slicot:MB04XD.f
            character*1 :: jobu
            character*1 :: jobv
            integer :: m
            integer :: n
            integer :: rank_bn
            double precision :: theta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision dimension(*) :: q
            logical dimension(*) :: inul
            double precision :: tol
            double precision :: reltol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine mb04xd
        subroutine mb04xy(jobu,jobv,m,n,x,ldx,taup,tauq,u,ldu,v,ldv,inul,info) ! in :slicot:MB04XY.f
            character*1 :: jobu
            character*1 :: jobv
            integer :: m
            integer :: n
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: taup
            double precision dimension(*) :: tauq
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            logical dimension(*) :: inul
            integer :: info
        end subroutine mb04xy
        subroutine mb04yd(jobu,jobv,m,n,rank_bn,theta,q,e,u,ldu,v,ldv,inul,tol,reltol,dwork,ldwork,iwarn,info) ! in :slicot:MB04YD.f
            character*1 :: jobu
            character*1 :: jobv
            integer :: m
            integer :: n
            integer :: rank_bn
            double precision :: theta
            double precision dimension(*) :: q
            double precision dimension(*) :: e
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            logical dimension(*) :: inul
            double precision :: tol
            double precision :: reltol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine mb04yd
        subroutine mb04yw(qrit,updatu,updatv,m,n,l,k,shift,d,e,u,ldu,v,ldv,dwork) ! in :slicot:MB04YW.f
            logical :: qrit
            logical :: updatu
            logical :: updatv
            integer :: m
            integer :: n
            integer :: l
            integer :: k
            double precision :: shift
            double precision dimension(*) :: d
            double precision dimension(*) :: e
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision dimension(*) :: dwork
        end subroutine mb04yw
        subroutine mb04zd(compu,n,a,lda,qg,ldqg,u,ldu,dwork,info) ! in :slicot:MB04ZD.f
            character :: compu
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldqg,*) :: qg
            integer optional,check(shape(qg,0)==ldqg),depend(qg) :: ldqg=shape(qg,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mb04zd
        subroutine mb05md(balanc,n,delta,a,lda,v,ldv,y,ldy,valr,vali,iwork,dwork,ldwork,info) ! in :slicot:MB05MD.f
            character*1 :: balanc
            integer :: n
            double precision :: delta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: valr
            double precision dimension(*) :: vali
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb05md
        subroutine mb05my(balanc,n,a,lda,wr,wi,r,ldr,q,ldq,dwork,ldwork,info) ! in :slicot:MB05MY.f
            character :: balanc
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb05my
        subroutine mb05nd(n,delta,a,lda,ex,ldex,exint,ldexin,tol,iwork,dwork,ldwork,info) ! in :slicot:MB05ND.f
            integer :: n
            double precision :: delta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldex,*) :: ex
            integer optional,check(shape(ex,0)==ldex),depend(ex) :: ldex=shape(ex,0)
            double precision dimension(ldexin,*) :: exint
            integer optional,check(shape(exint,0)==ldexin),depend(exint) :: ldexin=shape(exint,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mb05nd
        subroutine mb05od(balanc,n,ndiag,delta,a,lda,mdig,idig,iwork,dwork,ldwork,iwarn,info) ! in :slicot:MB05OD.f
            character*1 :: balanc
            integer :: n
            integer :: ndiag
            double precision :: delta
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: mdig
            integer :: idig
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine mb05od
        subroutine mb05oy(job,n,low,igh,a,lda,scale,info) ! in :slicot:MB05OY.f
            character*1 :: job
            integer :: n
            integer :: low
            integer :: igh
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: scale
            integer :: info
        end subroutine mb05oy
        subroutine mc01md(dp,alpha,k,p,q,info) ! in :slicot:MC01MD.f
            integer :: dp
            double precision :: alpha
            integer :: k
            double precision dimension(*) :: p
            double precision dimension(*) :: q
            integer :: info
        end subroutine mc01md
        subroutine mc01nd(dp,xr,xi,p,vr,vi,info) ! in :slicot:MC01ND.f
            integer :: dp
            double precision :: xr
            double precision :: xi
            double precision dimension(*) :: p
            double precision :: vr
            double precision :: vi
            integer :: info
        end subroutine mc01nd
        subroutine mc01od(k,rez,imz,rep,imp,dwork,info) ! in :slicot:MC01OD.f
            integer :: k
            double precision dimension(*) :: rez
            double precision dimension(*) :: imz
            double precision dimension(*) :: rep
            double precision dimension(*) :: imp
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mc01od
        subroutine mc01pd(k,rez,imz,p,dwork,info) ! in :slicot:MC01PD.f
            integer :: k
            double precision dimension(*) :: rez
            double precision dimension(*) :: imz
            double precision dimension(*) :: p
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mc01pd
        subroutine mc01qd(da,db,a,b,rq,iwarn,info) ! in :slicot:MC01QD.f
            integer :: da
            integer :: db
            double precision dimension(*) :: a
            double precision dimension(*) :: b
            double precision dimension(*) :: rq
            integer :: iwarn
            integer :: info
        end subroutine mc01qd
        subroutine mc01rd(dp1,dp2,dp3,alpha,p1,p2,p3,info) ! in :slicot:MC01RD.f
            integer :: dp1
            integer :: dp2
            integer :: dp3
            double precision :: alpha
            double precision dimension(*) :: p1
            double precision dimension(*) :: p2
            double precision dimension(*) :: p3
            integer :: info
        end subroutine mc01rd
        subroutine mc01sd(dp,p,s,t,mant,e,iwork,info) ! in :slicot:MC01SD.f
            integer :: dp
            double precision dimension(*) :: p
            integer :: s
            integer :: t
            double precision dimension(*) :: mant
            integer dimension(*) :: e
            integer dimension(*) :: iwork
            integer :: info
        end subroutine mc01sd
        subroutine mc01sw(a,b,m,e) ! in :slicot:MC01SW.f
            double precision :: a
            integer :: b
            double precision :: m
            integer :: e
        end subroutine mc01sw
        function mc01sx(lb,ub,e,mant) ! in :slicot:MC01SX.f
            integer :: lb
            integer :: ub
            integer dimension(*) :: e
            double precision dimension(*) :: mant
            integer :: mc01sx
        end function mc01sx
        subroutine mc01sy(m,e,b,a,ovflow) ! in :slicot:MC01SY.f
            double precision :: m
            integer :: e
            integer :: b
            double precision :: a
            logical :: ovflow
        end subroutine mc01sy
        subroutine mc01td(dico,dp,p,stable,nz,dwork,iwarn,info) ! in :slicot:MC01TD.f
            character*1 :: dico
            integer :: dp
            double precision dimension(*) :: p
            logical :: stable
            integer :: nz
            double precision dimension(*) :: dwork
            integer :: iwarn
            integer :: info
        end subroutine mc01td
        subroutine mc01vd(a,b,c,z1re,z1im,z2re,z2im,info) ! in :slicot:MC01VD.f
            double precision :: a
            double precision :: b
            double precision :: c
            double precision :: z1re
            double precision :: z1im
            double precision :: z2re
            double precision :: z2im
            integer :: info
        end subroutine mc01vd
        subroutine mc01wd(dp,p,u1,u2,q,info) ! in :slicot:MC01WD.f
            integer :: dp
            double precision dimension(*) :: p
            double precision :: u1
            double precision :: u2
            double precision dimension(*) :: q
            integer :: info
        end subroutine mc01wd
        subroutine mc03md(rp1,cp1,cp2,dp1,dp2,dp3,alpha,p1,ldp11,ldp12,p2,ldp21,ldp22,p3,ldp31,ldp32,dwork,info) ! in :slicot:MC03MD.f
            integer :: rp1
            integer :: cp1
            integer :: cp2
            integer :: dp1
            integer :: dp2
            integer :: dp3
            double precision :: alpha
            double precision dimension(ldp11,ldp12,*) :: p1
            integer optional,check(shape(p1,0)==ldp11),depend(p1) :: ldp11=shape(p1,0)
            integer optional,check(shape(p1,1)==ldp12),depend(p1) :: ldp12=shape(p1,1)
            double precision dimension(ldp21,ldp22,*) :: p2
            integer optional,check(shape(p2,0)==ldp21),depend(p2) :: ldp21=shape(p2,0)
            integer optional,check(shape(p2,1)==ldp22),depend(p2) :: ldp22=shape(p2,1)
            double precision dimension(ldp31,ldp32,*) :: p3
            integer optional,check(shape(p3,0)==ldp31),depend(p3) :: ldp31=shape(p3,0)
            integer optional,check(shape(p3,1)==ldp32),depend(p3) :: ldp32=shape(p3,1)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine mc03md
        subroutine mc03nd(mp,np,dp,p,ldp1,ldp2,dk,gam,nullsp,ldnull,ker,ldker1,ldker2,tol,iwork,dwork,ldwork,info) ! in :slicot:MC03ND.f
            integer :: mp
            integer :: np
            integer :: dp
            double precision dimension(ldp1,ldp2,*) :: p
            integer optional,check(shape(p,0)==ldp1),depend(p) :: ldp1=shape(p,0)
            integer optional,check(shape(p,1)==ldp2),depend(p) :: ldp2=shape(p,1)
            integer :: dk
            integer dimension(*) :: gam
            double precision dimension(ldnull,*) :: nullsp
            integer optional,check(shape(nullsp,0)==ldnull),depend(nullsp) :: ldnull=shape(nullsp,0)
            double precision dimension(ldker1,ldker2,*) :: ker
            integer optional,check(shape(ker,0)==ldker1),depend(ker) :: ldker1=shape(ker,0)
            integer optional,check(shape(ker,1)==ldker2),depend(ker) :: ldker2=shape(ker,1)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine mc03nd
        subroutine mc03nx(mp,np,dp,p,ldp1,ldp2,a,lda,e,lde) ! in :slicot:MC03NX.f
            integer :: mp
            integer :: np
            integer :: dp
            double precision dimension(ldp1,ldp2,*) :: p
            integer optional,check(shape(p,0)==ldp1),depend(p) :: ldp1=shape(p,0)
            integer optional,check(shape(p,1)==ldp2),depend(p) :: ldp2=shape(p,1)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
        end subroutine mc03nx
        subroutine mc03ny(nblcks,nra,nca,a,lda,e,lde,imuk,inuk,veps,ldveps,info) ! in :slicot:MC03NY.f
            integer :: nblcks
            integer :: nra
            integer :: nca
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            integer dimension(*) :: imuk
            integer dimension(*) :: inuk
            double precision dimension(ldveps,*) :: veps
            integer optional,check(shape(veps,0)==ldveps),depend(veps) :: ldveps=shape(veps,0)
            integer :: info
        end subroutine mc03ny
        subroutine sb01bd(dico,n,m,np,alpha,a,lda,b,ldb,wr,wi,nfp,nap,nup,f,ldf,z,ldz,tol,dwork,ldwork,iwarn,info) ! in :slicot:SB01BD.f
            character :: dico
            integer :: n
            integer :: m
            integer :: np
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer :: nfp
            integer :: nap
            integer :: nup
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine sb01bd
        subroutine sb01bx(reig,n,xr,xi,wr,wi,s,p) ! in :slicot:SB01BX.f
            logical :: reig
            integer :: n
            double precision :: xr
            double precision :: xi
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision :: s
            double precision :: p
        end subroutine sb01bx
        subroutine sb01by(n,m,s,p,a,b,f,tol,dwork,info) ! in :slicot:SB01BY.f
            integer optional,check(shape(a,0)==n),depend(a) :: n=shape(a,0)
            integer optional,check(shape(f,0)==m),depend(f) :: m=shape(f,0)
            double precision :: s
            double precision :: p
            double precision dimension(n,*) :: a
            double precision dimension(n,*),depend(n) :: b
            double precision dimension(m,*) :: f
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb01by
        subroutine sb01dd(n,m,indcon,a,lda,b,ldb,nblk,wr,wi,z,ldz,y,count,g,ldg,tol,iwork,dwork,ldwork,info) ! in :slicot:SB01DD.f
            integer :: n
            integer :: m
            integer :: indcon
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer dimension(*) :: nblk
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: y
            integer :: count
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb01dd
        subroutine sb01fy(discr,n,m,a,lda,b,ldb,f,ldf,v,ldv,info) ! in :slicot:SB01FY.f
            logical :: discr
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            integer :: info
        end subroutine sb01fy
        subroutine sb01md(ncont,n,a,lda,b,wr,wi,z,ldz,g,dwork,info) ! in :slicot:SB01MD.f
            integer :: ncont
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: b
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: g
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb01md
        function sb02cx(reig,ieig) ! in :slicot:SB02CX.f
            double precision :: reig
            double precision :: ieig
            logical :: sb02cx
        end function sb02cx
        subroutine sb02md(dico,hinv,uplo,scal,sort,n,a,lda,g,ldg,q,ldq,rcond,wr,wi,s,lds,u,ldu,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB02MD.f
            character :: dico
            character :: hinv
            character :: uplo
            character :: scal
            character :: sort
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision :: rcond
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb02md
        function sb02mr(reig,ieig) ! in :slicot:SB02MR.f
            double precision :: reig
            double precision :: ieig
            logical :: sb02mr
        end function sb02mr
        function sb02ms(reig,ieig) ! in :slicot:SB02MS.f
            double precision :: reig
            double precision :: ieig
            logical :: sb02ms
        end function sb02ms
        subroutine sb02mt(jobg,jobl,fact,uplo,n,m,a,lda,b,ldb,q,ldq,r,ldr,l,ldl,ipiv,oufact,g,ldg,iwork,dwork,ldwork,info) ! in :slicot:SB02MT.f
            character :: jobg
            character :: jobl
            character :: fact
            character :: uplo
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldl,*) :: l
            integer optional,check(shape(l,0)==ldl),depend(l) :: ldl=shape(l,0)
            integer dimension(*) :: ipiv
            integer :: oufact
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02mt
        subroutine sb02mu(dico,hinv,uplo,n,a,lda,g,ldg,q,ldq,s,lds,iwork,dwork,ldwork,info) ! in :slicot:SB02MU.f
            character :: dico
            character :: hinv
            character :: uplo
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02mu
        function sb02mv(reig,ieig) ! in :slicot:SB02MV.f
            double precision :: reig
            double precision :: ieig
            logical :: sb02mv
        end function sb02mv
        function sb02mw(reig,ieig) ! in :slicot:SB02MW.f
            double precision :: reig
            double precision :: ieig
            logical :: sb02mw
        end function sb02mw
        subroutine sb02nd(dico,fact,uplo,jobl,n,m,p,a,lda,b,ldb,r,ldr,ipiv,l,ldl,x,ldx,rnorm,f,ldf,oufact,iwork,dwork,ldwork,info) ! in :slicot:SB02ND.f
            character*1 :: dico
            character*1 :: fact
            character*1 :: uplo
            character*1 :: jobl
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            integer dimension(*) :: ipiv
            double precision dimension(ldl,*) :: l
            integer optional,check(shape(l,0)==ldl),depend(l) :: ldl=shape(l,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: rnorm
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            integer dimension(2) :: oufact
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02nd
        subroutine sb02od(dico,jobb,fact,uplo,jobl,sort,n,m,p,a,lda,b,ldb,q,ldq,r,ldr,l,ldl,rcond,x,ldx,alfar,alfai,beta,s,lds,t,ldt,u,ldu,tol,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB02OD.f
            character :: dico
            character :: jobb
            character :: fact
            character :: uplo
            character :: jobl
            character :: sort
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldl,*) :: l
            integer optional,check(shape(l,0)==ldl),depend(l) :: ldl=shape(l,0)
            double precision :: rcond
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: alfar
            double precision dimension(*) :: alfai
            double precision dimension(*) :: beta
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb02od
        function sb02ou(alphar,alphai,beta) ! in :slicot:SB02OU.f
            double precision :: alphar
            double precision :: alphai
            double precision :: beta
            logical :: sb02ou
        end function sb02ou
        function sb02ov(alphar,alphai,beta) ! in :slicot:SB02OV.f
            double precision :: alphar
            double precision :: alphai
            double precision :: beta
            logical :: sb02ov
        end function sb02ov
        function sb02ow(alphar,alphai,beta) ! in :slicot:SB02OW.f
            double precision :: alphar
            double precision :: alphai
            double precision :: beta
            logical :: sb02ow
        end function sb02ow
        function sb02ox(alphar,alphai,beta) ! in :slicot:SB02OX.f
            double precision :: alphar
            double precision :: alphai
            double precision :: beta
            logical :: sb02ox
        end function sb02ox
        subroutine sb02oy(type_bn,dico,jobb,fact,uplo,jobl,jobe,n,m,p,a,lda,b,ldb,q,ldq,r,ldr,l,ldl,e,lde,af,ldaf,bf,ldbf,tol,iwork,dwork,ldwork,info) ! in :slicot:SB02OY.f
            character :: type_bn
            character :: dico
            character :: jobb
            character :: fact
            character :: uplo
            character :: jobl
            character :: jobe
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(ldl,*) :: l
            integer optional,check(shape(l,0)==ldl),depend(l) :: ldl=shape(l,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldaf,*) :: af
            integer optional,check(shape(af,0)==ldaf),depend(af) :: ldaf=shape(af,0)
            double precision dimension(ldbf,*) :: bf
            integer optional,check(shape(bf,0)==ldbf),depend(bf) :: ldbf=shape(bf,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02oy
        subroutine sb02pd(job,trana,uplo,n,a,lda,g,ldg,q,ldq,x,ldx,rcond,ferr,wr,wi,iwork,dwork,ldwork,info) ! in :slicot:SB02PD.f
            character :: job
            character :: trana
            character :: uplo
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: rcond
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02pd
        subroutine sb02qd(job,fact,trana,uplo,lyapun,n,a,lda,t,ldt,u,ldu,g,ldg,q,ldq,x,ldx,sep,rcond,ferr,iwork,dwork,ldwork,info) ! in :slicot:SB02QD.f
            character :: job
            character :: fact
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sep
            double precision :: rcond
            double precision :: ferr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02qd
        subroutine sb02rd(job,dico,hinv,trana,uplo,scal,sort,fact,lyapun,n,a,lda,t,ldt,v,ldv,g,ldg,q,ldq,x,ldx,sep,rcond,ferr,wr,wi,s,lds,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB02RD.f
            character :: job
            character :: dico
            character :: hinv
            character :: trana
            character :: uplo
            character :: scal
            character :: sort
            character :: fact
            character :: lyapun
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sep
            double precision :: rcond
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb02rd
        subroutine sb02ru(dico,hinv,trana,uplo,n,a,lda,g,ldg,q,ldq,s,lds,iwork,dwork,ldwork,info) ! in :slicot:SB02RU.f
            character :: dico
            character :: hinv
            character :: trana
            character :: uplo
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02ru
        subroutine sb02sd(job,fact,trana,uplo,lyapun,n,a,lda,t,ldt,u,ldu,g,ldg,q,ldq,x,ldx,sepd,rcond,ferr,iwork,dwork,ldwork,info) ! in :slicot:SB02SD.f
            character :: job
            character :: fact
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sepd
            double precision :: rcond
            double precision :: ferr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb02sd
        subroutine sb03md(dico,job,fact,trana,n,a,lda,u,ldu,c,ldc,scale,sep,ferr,wr,wi,iwork,dwork,ldwork,info) ! in :slicot:SB03MD.f
            character :: dico
            character :: job
            character :: fact
            character :: trana
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            double precision :: sep
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03md
        subroutine sb03mu(ltranl,ltranr,isgn,n1,n2,tl,ldtl,tr,ldtr,b,ldb,scale,x,ldx,xnorm,info) ! in :slicot:SB03MU.f
            logical :: ltranl
            logical :: ltranr
            integer :: isgn
            integer :: n1
            integer :: n2
            double precision dimension(ldtl,*) :: tl
            integer optional,check(shape(tl,0)==ldtl),depend(tl) :: ldtl=shape(tl,0)
            double precision dimension(ldtr,*) :: tr
            integer optional,check(shape(tr,0)==ldtr),depend(tr) :: ldtr=shape(tr,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: xnorm
            integer :: info
        end subroutine sb03mu
        subroutine sb03mv(ltran,lupper,t,ldt,b,ldb,scale,x,ldx,xnorm,info) ! in :slicot:SB03MV.f
            logical :: ltran
            logical :: lupper
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: xnorm
            integer :: info
        end subroutine sb03mv
        subroutine sb03mw(ltran,lupper,t,ldt,b,ldb,scale,x,ldx,xnorm,info) ! in :slicot:SB03MW.f
            logical :: ltran
            logical :: lupper
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: xnorm
            integer :: info
        end subroutine sb03mw
        subroutine sb03mx(trana,n,a,lda,c,ldc,scale,dwork,info) ! in :slicot:SB03MX.f
            character :: trana
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb03mx
        subroutine sb03my(trana,n,a,lda,c,ldc,scale,info) ! in :slicot:SB03MY.f
            character :: trana
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            integer :: info
        end subroutine sb03my
        subroutine sb03od(dico,fact,trans,n,m,a,lda,q,ldq,b,ldb,scale,wr,wi,dwork,ldwork,info) ! in :slicot:SB03OD.f
            character :: dico
            character :: fact
            character :: trans
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03od
        subroutine sb03or(discr,ltrans,n,m,s,lds,a,lda,c,ldc,scale,info) ! in :slicot:SB03OR.f
            logical :: discr
            logical :: ltrans
            integer :: n
            integer :: m
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            integer :: info
        end subroutine sb03or
        subroutine sb03ot(discr,ltrans,n,s,lds,r,ldr,scale,dwork,info) ! in :slicot:SB03OT.f
            logical :: discr
            logical :: ltrans
            integer :: n
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb03ot
        subroutine sb03ou(discr,ltrans,n,m,a,lda,b,ldb,tau,u,ldu,scale,dwork,ldwork,info) ! in :slicot:SB03OU.f
            logical :: discr
            logical :: ltrans
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(*) :: tau
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03ou
        subroutine sb03ov(a,b,c,s) ! in :slicot:SB03OV.f
            double precision dimension(2) :: a
            double precision :: b
            double precision dimension(2) :: c
            double precision :: s
        end subroutine sb03ov
        subroutine sb03oy(discr,ltrans,isgn,s,lds,r,ldr,a,lda,scale,info) ! in :slicot:SB03OY.f
            logical :: discr
            logical :: ltrans
            integer :: isgn
            double precision dimension(lds,*) :: s
            integer optional,check(shape(s,0)==lds),depend(s) :: lds=shape(s,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: scale
            integer :: info
        end subroutine sb03oy
        subroutine sb03pd(job,fact,trana,n,a,lda,u,ldu,c,ldc,scale,sepd,ferr,wr,wi,iwork,dwork,ldwork,info) ! in :slicot:SB03PD.f
            character :: job
            character :: fact
            character :: trana
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            double precision :: sepd
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03pd
        subroutine sb03qd(job,fact,trana,uplo,lyapun,n,scale,a,lda,t,ldt,u,ldu,c,ldc,x,ldx,sep,rcond,ferr,iwork,dwork,ldwork,info) ! in :slicot:SB03QD.f
            character :: job
            character :: fact
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision :: scale
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sep
            double precision :: rcond
            double precision :: ferr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03qd
        subroutine sb03qx(trana,uplo,lyapun,n,xanorm,t,ldt,u,ldu,r,ldr,ferr,iwork,dwork,ldwork,info) ! in :slicot:SB03QX.f
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision :: xanorm
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision :: ferr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03qx
        subroutine sb03qy(job,trana,lyapun,n,t,ldt,u,ldu,x,ldx,sep,thnorm,iwork,dwork,ldwork,info) ! in :slicot:SB03QY.f
            character :: job
            character :: trana
            character :: lyapun
            integer :: n
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sep
            double precision :: thnorm
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03qy
        subroutine sb03rd(job,fact,trana,n,a,lda,u,ldu,c,ldc,scale,sep,ferr,wr,wi,iwork,dwork,ldwork,info) ! in :slicot:SB03RD.f
            character :: job
            character :: fact
            character :: trana
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            double precision :: sep
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03rd
        subroutine sb03sd(job,fact,trana,uplo,lyapun,n,scale,a,lda,t,ldt,u,ldu,c,ldc,x,ldx,sepd,rcond,ferr,iwork,dwork,ldwork,info) ! in :slicot:SB03SD.f
            character :: job
            character :: fact
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision :: scale
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sepd
            double precision :: rcond
            double precision :: ferr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03sd
        subroutine sb03sx(trana,uplo,lyapun,n,xanorm,t,ldt,u,ldu,r,ldr,ferr,iwork,dwork,ldwork,info) ! in :slicot:SB03SX.f
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision :: xanorm
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldr,*) :: r
            integer optional,check(shape(r,0)==ldr),depend(r) :: ldr=shape(r,0)
            double precision :: ferr
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03sx
        subroutine sb03sy(job,trana,lyapun,n,t,ldt,u,ldu,xa,ldxa,sepd,thnorm,iwork,dwork,ldwork,info) ! in :slicot:SB03SY.f
            character :: job
            character :: trana
            character :: lyapun
            integer :: n
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldxa,*) :: xa
            integer optional,check(shape(xa,0)==ldxa),depend(xa) :: ldxa=shape(xa,0)
            double precision :: sepd
            double precision :: thnorm
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03sy
        subroutine sb03td(job,fact,trana,uplo,lyapun,n,scale,a,lda,t,ldt,u,ldu,c,ldc,x,ldx,sep,rcond,ferr,wr,wi,iwork,dwork,ldwork,info) ! in :slicot:SB03TD.f
            character :: job
            character :: fact
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision :: scale
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sep
            double precision :: rcond
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03td
        subroutine sb03ud(job,fact,trana,uplo,lyapun,n,scale,a,lda,t,ldt,u,ldu,c,ldc,x,ldx,sepd,rcond,ferr,wr,wi,iwork,dwork,ldwork,info) ! in :slicot:SB03UD.f
            character :: job
            character :: fact
            character :: trana
            character :: uplo
            character :: lyapun
            integer :: n
            double precision :: scale
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: sepd
            double precision :: rcond
            double precision :: ferr
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb03ud
        subroutine sb04md(a,b,c) ! in :slicot:SB04MD.f
            integer depend(a),intent(hide):: n = shape(a,1)
            integer depend(b),intent(hide):: m = shape(b,1)
            double precision dimension(lda,n) :: a
            integer depend(a),intent(hide) :: lda=shape(a,0)
            double precision dimension(ldb,m) :: b
            integer depend(b),intent(hide) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer check(shape(c,0)==ldc),check(shape(c,1)==m),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldz,m),intent(out) :: z
            integer depend(z),intent(hide) :: ldz=shape(z,0)
            integer dimension(4*n),intent(hide,cache) :: iwork
            double precision dimension(ldwork),intent(hide,cache) :: dwork
            integer intent(hide) :: ldwork=MAX(1,2*n*n+8*n,5*m,n+m)
            integer intent(output):: info
        end subroutine sb04md
        subroutine sb04mr(m,d,ipr,info) ! in :slicot:SB04MR.f
            integer :: m
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04mr
        subroutine sb04mu(n,m,ind,a,lda,b,ldb,c,ldc,d,ipr,info) ! in :slicot:SB04MU.f
            integer :: n
            integer :: m
            integer :: ind
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04mu
        subroutine sb04mw(m,d,ipr,info) ! in :slicot:SB04MW.f
            integer :: m
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04mw
        subroutine sb04my(n,m,ind,a,lda,b,ldb,c,ldc,d,ipr,info) ! in :slicot:SB04MY.f
            integer :: n
            integer :: m
            integer :: ind
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04my
        subroutine sb04nd(abschu,ula,ulb,n,m,a,lda,b,ldb,c,ldc,tol,iwork,dwork,ldwork,info) ! in :slicot:SB04ND.f
            character :: abschu
            character :: ula
            character :: ulb
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb04nd
        subroutine sb04nv(abschr,ul,n,m,c,ldc,indx,ab,ldab,d) ! in :slicot:SB04NV.f
            character :: abschr
            character :: ul
            integer :: n
            integer :: m
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: indx
            double precision dimension(ldab,*) :: ab
            integer optional,check(shape(ab,0)==ldab),depend(ab) :: ldab=shape(ab,0)
            double precision dimension(*) :: d
        end subroutine sb04nv
        subroutine sb04nw(abschr,ul,n,m,c,ldc,indx,ab,ldab,d) ! in :slicot:SB04NW.f
            character :: abschr
            character :: ul
            integer :: n
            integer :: m
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: indx
            double precision dimension(ldab,*) :: ab
            integer optional,check(shape(ab,0)==ldab),depend(ab) :: ldab=shape(ab,0)
            double precision dimension(*) :: d
        end subroutine sb04nw
        subroutine sb04nx(rc,ul,m,a,lda,lambd1,lambd2,lambd3,lambd4,d,tol,iwork,dwork,lddwor,info) ! in :slicot:SB04NX.f
            character :: rc
            character :: ul
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: lambd1
            double precision :: lambd2
            double precision :: lambd3
            double precision :: lambd4
            double precision dimension(*) :: d
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(lddwor,*) :: dwork
            integer optional,check(shape(dwork,0)==lddwor),depend(dwork) :: lddwor=shape(dwork,0)
            integer :: info
        end subroutine sb04nx
        subroutine sb04ny(rc,ul,m,a,lda,lambda,d,tol,iwork,dwork,lddwor,info) ! in :slicot:SB04NY.f
            character :: rc
            character :: ul
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: lambda
            double precision dimension(*) :: d
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(lddwor,*) :: dwork
            integer optional,check(shape(dwork,0)==lddwor),depend(dwork) :: lddwor=shape(dwork,0)
            integer :: info
        end subroutine sb04ny
        subroutine sb04od(reduce,trans,jobd,m,n,a,lda,b,ldb,c,ldc,d,ldd,e,lde,f,ldf,scale,dif,p,ldp,q,ldq,u,ldu,v,ldv,iwork,dwork,ldwork,info) ! in :slicot:SB04OD.f
            character :: reduce
            character :: trans
            character :: jobd
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision :: scale
            double precision :: dif
            double precision dimension(ldp,*) :: p
            integer optional,check(shape(p,0)==ldp),depend(p) :: ldp=shape(p,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb04od
        subroutine sb04pd(dico,facta,factb,trana,tranb,isgn,m,n,a,lda,u,ldu,b,ldb,v,ldv,c,ldc,scale,dwork,ldwork,info) ! in :slicot:SB04PD.f
            character :: dico
            character :: facta
            character :: factb
            character :: trana
            character :: tranb
            integer :: isgn
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldv,*) :: v
            integer optional,check(shape(v,0)==ldv),depend(v) :: ldv=shape(v,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb04pd
        subroutine sb04px(ltranl,ltranr,isgn,n1,n2,tl,ldtl,tr,ldtr,b,ldb,scale,x,ldx,xnorm,info) ! in :slicot:SB04PX.f
            logical :: ltranl
            logical :: ltranr
            integer :: isgn
            integer :: n1
            integer :: n2
            double precision dimension(ldtl,*) :: tl
            integer optional,check(shape(tl,0)==ldtl),depend(tl) :: ldtl=shape(tl,0)
            double precision dimension(ldtr,*) :: tr
            integer optional,check(shape(tr,0)==ldtr),depend(tr) :: ldtr=shape(tr,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: xnorm
            integer :: info
        end subroutine sb04px
        subroutine sb04py(trana,tranb,isgn,m,n,a,lda,b,ldb,c,ldc,scale,dwork,info) ! in :slicot:SB04PY.f
            character :: trana
            character :: tranb
            integer :: isgn
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb04py
        subroutine sb04qd(n,m,a,lda,b,ldb,c,ldc,z,ldz,iwork,dwork,ldwork,info) ! in :slicot:SB04QD.f
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb04qd
        subroutine sb04qr(m,d,ipr,info) ! in :slicot:SB04QR.f
            integer :: m
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04qr
        subroutine sb04qu(n,m,ind,a,lda,b,ldb,c,ldc,d,ipr,info) ! in :slicot:SB04QU.f
            integer :: n
            integer :: m
            integer :: ind
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04qu
        subroutine sb04qy(n,m,ind,a,lda,b,ldb,c,ldc,d,ipr,info) ! in :slicot:SB04QY.f
            integer :: n
            integer :: m
            integer :: ind
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: d
            integer dimension(*) :: ipr
            integer :: info
        end subroutine sb04qy
        subroutine sb04rd(abschu,ula,ulb,n,m,a,lda,b,ldb,c,ldc,tol,iwork,dwork,ldwork,info) ! in :slicot:SB04RD.f
            character :: abschu
            character :: ula
            character :: ulb
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb04rd
        subroutine sb04rv(abschr,ul,n,m,c,ldc,indx,ab,ldab,ba,ldba,d,dwork) ! in :slicot:SB04RV.f
            character :: abschr
            character :: ul
            integer :: n
            integer :: m
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: indx
            double precision dimension(ldab,*) :: ab
            integer optional,check(shape(ab,0)==ldab),depend(ab) :: ldab=shape(ab,0)
            double precision dimension(ldba,*) :: ba
            integer optional,check(shape(ba,0)==ldba),depend(ba) :: ldba=shape(ba,0)
            double precision dimension(*) :: d
            double precision dimension(*) :: dwork
        end subroutine sb04rv
        subroutine sb04rw(abschr,ul,n,m,c,ldc,indx,ab,ldab,ba,ldba,d,dwork) ! in :slicot:SB04RW.f
            character :: abschr
            character :: ul
            integer :: n
            integer :: m
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: indx
            double precision dimension(ldab,*) :: ab
            integer optional,check(shape(ab,0)==ldab),depend(ab) :: ldab=shape(ab,0)
            double precision dimension(ldba,*) :: ba
            integer optional,check(shape(ba,0)==ldba),depend(ba) :: ldba=shape(ba,0)
            double precision dimension(*) :: d
            double precision dimension(*) :: dwork
        end subroutine sb04rw
        subroutine sb04rx(rc,ul,m,a,lda,lambd1,lambd2,lambd3,lambd4,d,tol,iwork,dwork,lddwor,info) ! in :slicot:SB04RX.f
            character :: rc
            character :: ul
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: lambd1
            double precision :: lambd2
            double precision :: lambd3
            double precision :: lambd4
            double precision dimension(*) :: d
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(lddwor,*) :: dwork
            integer optional,check(shape(dwork,0)==lddwor),depend(dwork) :: lddwor=shape(dwork,0)
            integer :: info
        end subroutine sb04rx
        subroutine sb04ry(rc,ul,m,a,lda,lambda,d,tol,iwork,dwork,lddwor,info) ! in :slicot:SB04RY.f
            character :: rc
            character :: ul
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision :: lambda
            double precision dimension(*) :: d
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(lddwor,*) :: dwork
            integer optional,check(shape(dwork,0)==lddwor),depend(dwork) :: lddwor=shape(dwork,0)
            integer :: info
        end subroutine sb04ry
        subroutine sb06nd(n,m,kmax,a,lda,b,ldb,kstair,u,ldu,f,ldf,dwork,info) ! in :slicot:SB06ND.f
            integer :: n
            integer :: m
            integer :: kmax
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            integer dimension(*) :: kstair
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb06nd
        subroutine sb08cd(dico,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,nq,nr,br,ldbr,dr,lddr,tol,dwork,ldwork,iwarn,info) ! in :slicot:SB08CD.f
            character :: dico
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nq
            integer :: nr
            double precision dimension(ldbr,*) :: br
            integer optional,check(shape(br,0)==ldbr),depend(br) :: ldbr=shape(br,0)
            double precision dimension(lddr,*) :: dr
            integer optional,check(shape(dr,0)==lddr),depend(dr) :: lddr=shape(dr,0)
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine sb08cd
        subroutine sb08dd(dico,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,nq,nr,cr,ldcr,dr,lddr,tol,dwork,ldwork,iwarn,info) ! in :slicot:SB08DD.f
            character :: dico
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nq
            integer :: nr
            double precision dimension(ldcr,*) :: cr
            integer optional,check(shape(cr,0)==ldcr),depend(cr) :: ldcr=shape(cr,0)
            double precision dimension(lddr,*) :: dr
            integer optional,check(shape(dr,0)==lddr),depend(dr) :: lddr=shape(dr,0)
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine sb08dd
        subroutine sb08ed(dico,n,m,p,alpha,a,lda,b,ldb,c,ldc,d,ldd,nq,nr,br,ldbr,dr,lddr,tol,dwork,ldwork,iwarn,info) ! in :slicot:SB08ED.f
            character :: dico
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nq
            integer :: nr
            double precision dimension(ldbr,*) :: br
            integer optional,check(shape(br,0)==ldbr),depend(br) :: ldbr=shape(br,0)
            double precision dimension(lddr,*) :: dr
            integer optional,check(shape(dr,0)==lddr),depend(dr) :: lddr=shape(dr,0)
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine sb08ed
        subroutine sb08fd(dico,n,m,p,alpha,a,lda,b,ldb,c,ldc,d,ldd,nq,nr,cr,ldcr,dr,lddr,tol,dwork,ldwork,iwarn,info) ! in :slicot:SB08FD.f
            character :: dico
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nq
            integer :: nr
            double precision dimension(ldcr,*) :: cr
            integer optional,check(shape(cr,0)==ldcr),depend(cr) :: ldcr=shape(cr,0)
            double precision dimension(lddr,*) :: dr
            integer optional,check(shape(dr,0)==lddr),depend(dr) :: lddr=shape(dr,0)
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: iwarn
            integer :: info
        end subroutine sb08fd
        subroutine sb08gd(n,m,p,a,lda,b,ldb,c,ldc,d,ldd,br,ldbr,dr,lddr,iwork,dwork,info) ! in :slicot:SB08GD.f
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldbr,*) :: br
            integer optional,check(shape(br,0)==ldbr),depend(br) :: ldbr=shape(br,0)
            double precision dimension(lddr,*) :: dr
            integer optional,check(shape(dr,0)==lddr),depend(dr) :: lddr=shape(dr,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb08gd
        subroutine sb08hd(n,m,p,a,lda,b,ldb,c,ldc,d,ldd,cr,ldcr,dr,lddr,iwork,dwork,info) ! in :slicot:SB08HD.f
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldcr,*) :: cr
            integer optional,check(shape(cr,0)==ldcr),depend(cr) :: ldcr=shape(cr,0)
            double precision dimension(lddr,*) :: dr
            integer optional,check(shape(dr,0)==lddr),depend(dr) :: lddr=shape(dr,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sb08hd
        subroutine sb08md(acona,da,a,res,e,dwork,ldwork,info) ! in :slicot:SB08MD.f
            character :: acona
            integer :: da
            double precision dimension(*) :: a
            double precision :: res
            double precision dimension(*) :: e
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb08md
        subroutine sb08my(da,a,b,epsb) ! in :slicot:SB08MY.f
            integer :: da
            double precision dimension(*) :: a
            double precision dimension(*) :: b
            double precision :: epsb
        end subroutine sb08my
        subroutine sb08nd(acona,da,a,res,e,dwork,ldwork,info) ! in :slicot:SB08ND.f
            character :: acona
            integer :: da
            double precision dimension(*) :: a
            double precision :: res
            double precision dimension(*) :: e
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb08nd
        subroutine sb08ny(da,a,b,epsb) ! in :slicot:SB08NY.f
            integer :: da
            double precision dimension(*) :: a
            double precision dimension(*) :: b
            double precision :: epsb
        end subroutine sb08ny
        subroutine sb09md(n,nc,nb,h1,ldh1,h2,ldh2,ss,ldss,se,ldse,pre,ldpre,tol,info) ! in :slicot:SB09MD.f
            integer :: n
            integer :: nc
            integer :: nb
            double precision dimension(ldh1,*) :: h1
            integer optional,check(shape(h1,0)==ldh1),depend(h1) :: ldh1=shape(h1,0)
            double precision dimension(ldh2,*) :: h2
            integer optional,check(shape(h2,0)==ldh2),depend(h2) :: ldh2=shape(h2,0)
            double precision dimension(ldss,*) :: ss
            integer optional,check(shape(ss,0)==ldss),depend(ss) :: ldss=shape(ss,0)
            double precision dimension(ldse,*) :: se
            integer optional,check(shape(se,0)==ldse),depend(se) :: ldse=shape(se,0)
            double precision dimension(ldpre,*) :: pre
            integer optional,check(shape(pre,0)==ldpre),depend(pre) :: ldpre=shape(pre,0)
            double precision :: tol
            integer :: info
        end subroutine sb09md
        subroutine sb10dd(n,m,np,ncon,nmeas,gamma,a,lda,b,ldb,c,ldc,d,ldd,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,x,ldx,z,ldz,rcond,tol,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10DD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision :: gamma
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10dd
        subroutine sb10ed(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,d,ldd,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,rcond,tol,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10ED.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision dimension(*) :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10ed
        subroutine sb10fd(n,m,np,ncon,nmeas,gamma,a,lda,b,ldb,c,ldc,d,ldd,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,rcond,tol,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10FD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision :: gamma
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision dimension(4) :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10fd
        subroutine sb10hd(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,d,ldd,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,rcond,tol,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10HD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision dimension(4) :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10hd
        subroutine sb10ld(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,d,ldd,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,ac,ldac,bc,ldbc,cc,ldcc,dc,lddc,iwork,dwork,ldwork,info) ! in :slicot:SB10LD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision dimension(ldac,*) :: ac
            integer optional,check(shape(ac,0)==ldac),depend(ac) :: ldac=shape(ac,0)
            double precision dimension(ldbc,*) :: bc
            integer optional,check(shape(bc,0)==ldbc),depend(bc) :: ldbc=shape(bc,0)
            double precision dimension(ldcc,*) :: cc
            integer optional,check(shape(cc,0)==ldcc),depend(cc) :: ldcc=shape(cc,0)
            double precision dimension(lddc,*) :: dc
            integer optional,check(shape(dc,0)==lddc),depend(dc) :: lddc=shape(dc,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb10ld
        subroutine sb10pd(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,d,ldd,tu,ldtu,ty,ldty,rcond,tol,dwork,ldwork,info) ! in :slicot:SB10PD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldtu,*) :: tu
            integer optional,check(shape(tu,0)==ldtu),depend(tu) :: ldtu=shape(tu,0)
            double precision dimension(ldty,*) :: ty
            integer optional,check(shape(ty,0)==ldty),depend(ty) :: ldty=shape(ty,0)
            double precision dimension(2) :: rcond
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb10pd
        subroutine sb10qd(n,m,np,ncon,nmeas,gamma,a,lda,b,ldb,c,ldc,d,ldd,f,ldf,h,ldh,x,ldx,y,ldy,xycond,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10QD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision :: gamma
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(2) :: xycond
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10qd
        subroutine sb10rd(n,m,np,ncon,nmeas,gamma,a,lda,b,ldb,c,ldc,d,ldd,f,ldf,h,ldh,tu,ldtu,ty,ldty,x,ldx,y,ldy,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,iwork,dwork,ldwork,info) ! in :slicot:SB10RD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision :: gamma
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldtu,*) :: tu
            integer optional,check(shape(tu,0)==ldtu),depend(tu) :: ldtu=shape(tu,0)
            double precision dimension(ldty,*) :: ty
            integer optional,check(shape(ty,0)==ldty),depend(ty) :: ldty=shape(ty,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb10rd
        subroutine sb10sd(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,d,ldd,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,x,ldx,y,ldy,rcond,tol,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10SD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10sd
        subroutine sb10td(n,m,np,ncon,nmeas,d,ldd,tu,ldtu,ty,ldty,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,rcond,tol,iwork,dwork,ldwork,info) ! in :slicot:SB10TD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldtu,*) :: tu
            integer optional,check(shape(tu,0)==ldtu),depend(tu) :: ldtu=shape(tu,0)
            double precision dimension(ldty,*) :: ty
            integer optional,check(shape(ty,0)==ldty),depend(ty) :: ldty=shape(ty,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            double precision :: rcond
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb10td
        subroutine sb10ud(n,m,np,ncon,nmeas,b,ldb,c,ldc,d,ldd,tu,ldtu,ty,ldty,rcond,tol,dwork,ldwork,info) ! in :slicot:SB10UD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldtu,*) :: tu
            integer optional,check(shape(tu,0)==ldtu),depend(tu) :: ldtu=shape(tu,0)
            double precision dimension(ldty,*) :: ty
            integer optional,check(shape(ty,0)==ldty),depend(ty) :: ldty=shape(ty,0)
            double precision dimension(2) :: rcond
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sb10ud
        subroutine sb10vd(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,f,ldf,h,ldh,x,ldx,y,ldy,xycond,iwork,dwork,ldwork,bwork,info) ! in :slicot:SB10VD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(2) :: xycond
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            logical dimension(*) :: bwork
            integer :: info
        end subroutine sb10vd
        subroutine sb10wd(n,m,np,ncon,nmeas,a,lda,b,ldb,c,ldc,d,ldd,f,ldf,h,ldh,tu,ldtu,ty,ldty,ak,ldak,bk,ldbk,ck,ldck,dk,lddk,info) ! in :slicot:SB10WD.f
            integer :: n
            integer :: m
            integer :: np
            integer :: ncon
            integer :: nmeas
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldf,*) :: f
            integer optional,check(shape(f,0)==ldf),depend(f) :: ldf=shape(f,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldtu,*) :: tu
            integer optional,check(shape(tu,0)==ldtu),depend(tu) :: ldtu=shape(tu,0)
            double precision dimension(ldty,*) :: ty
            integer optional,check(shape(ty,0)==ldty),depend(ty) :: ldty=shape(ty,0)
            double precision dimension(ldak,*) :: ak
            integer optional,check(shape(ak,0)==ldak),depend(ak) :: ldak=shape(ak,0)
            double precision dimension(ldbk,*) :: bk
            integer optional,check(shape(bk,0)==ldbk),depend(bk) :: ldbk=shape(bk,0)
            double precision dimension(ldck,*) :: ck
            integer optional,check(shape(ck,0)==ldck),depend(ck) :: ldck=shape(ck,0)
            double precision dimension(lddk,*) :: dk
            integer optional,check(shape(dk,0)==lddk),depend(dk) :: lddk=shape(dk,0)
            integer :: info
        end subroutine sb10wd
        function select(par1,par2) ! in :slicot:select.f
            double precision :: par1
            double precision :: par2
            logical :: select
        end function select
        subroutine sg03ad(dico,job,fact,trans,uplo,n,a,lda,e,lde,q,ldq,z,ldz,x,ldx,scale,sep,ferr,alphar,alphai,beta,iwork,dwork,ldwork,info) ! in :slicot:SG03AD.f
            character :: dico
            character :: job
            character :: fact
            character :: trans
            character :: uplo
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: scale
            double precision :: sep
            double precision :: ferr
            double precision dimension(*) :: alphar
            double precision dimension(*) :: alphai
            double precision dimension(*) :: beta
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sg03ad
        subroutine sg03ax(trans,n,a,lda,e,lde,x,ldx,scale,info) ! in :slicot:SG03AX.f
            character :: trans
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: scale
            integer :: info
        end subroutine sg03ax
        subroutine sg03ay(trans,n,a,lda,e,lde,x,ldx,scale,info) ! in :slicot:SG03AY.f
            character :: trans
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: scale
            integer :: info
        end subroutine sg03ay
        subroutine sg03bd(dico,fact,trans,n,m,a,lda,e,lde,q,ldq,z,ldz,b,ldb,scale,alphar,alphai,beta,dwork,ldwork,info) ! in :slicot:SG03BD.f
            character :: dico
            character :: fact
            character :: trans
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(*) :: alphar
            double precision dimension(*) :: alphai
            double precision dimension(*) :: beta
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine sg03bd
        subroutine sg03bu(trans,n,a,lda,e,lde,b,ldb,scale,dwork,info) ! in :slicot:SG03BU.f
            character :: trans
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sg03bu
        subroutine sg03bv(trans,n,a,lda,e,lde,b,ldb,scale,dwork,info) ! in :slicot:SG03BV.f
            character :: trans
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision :: scale
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine sg03bv
        subroutine sg03bw(trans,m,n,a,lda,c,ldc,e,lde,d,ldd,x,ldx,scale,info) ! in :slicot:SG03BW.f
            character :: trans
            integer :: m
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision :: scale
            integer :: info
        end subroutine sg03bw
        subroutine sg03bx(dico,trans,a,lda,e,lde,b,ldb,u,ldu,scale,m1,ldm1,m2,ldm2,info) ! in :slicot:SG03BX.f
            character :: dico
            character :: trans
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision :: scale
            double precision dimension(ldm1,*) :: m1
            integer optional,check(shape(m1,0)==ldm1),depend(m1) :: ldm1=shape(m1,0)
            double precision dimension(ldm2,*) :: m2
            integer optional,check(shape(m2,0)==ldm2),depend(m2) :: ldm2=shape(m2,0)
            integer :: info
        end subroutine sg03bx
        subroutine sg03by(xr,xi,yr,yi,cr,ci,sr,si,z) ! in :slicot:SG03BY.f
            double precision :: xr
            double precision :: xi
            double precision :: yr
            double precision :: yi
            double precision :: cr
            double precision :: ci
            double precision :: sr
            double precision :: si
            double precision :: z
        end subroutine sg03by
        subroutine tb01id(job,n,m,p,maxred,a,lda,b,ldb,c,ldc,scale,info) ! in :slicot:TB01ID.f
            character*1 :: job
            integer :: n
            integer :: m
            integer :: p
            double precision :: maxred
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: scale
            integer :: info
        end subroutine tb01id
        subroutine tb01kd(dico,stdom,joba,n,m,p,alpha,a,lda,b,ldb,c,ldc,ndim,u,ldu,wr,wi,dwork,ldwork,info) ! in :slicot:TB01KD.f
            character :: dico
            character :: stdom
            character :: joba
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: ndim
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb01kd
        subroutine tb01ld(dico,stdom,joba,n,m,p,alpha,a,lda,b,ldb,c,ldc,ndim,u,ldu,wr,wi,dwork,ldwork,info) ! in :slicot:TB01LD.f
            character :: dico
            character :: stdom
            character :: joba
            integer :: n
            integer :: m
            integer :: p
            double precision :: alpha
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: ndim
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb01ld
        subroutine tb01md(jobu,uplo,n,m,a,lda,b,ldb,u,ldu,dwork,info) ! in :slicot:TB01MD.f
            character*1 :: jobu
            character*1 :: uplo
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tb01md
        subroutine tb01nd(jobu,uplo,n,p,a,lda,c,ldc,u,ldu,dwork,info) ! in :slicot:TB01ND.f
            character*1 :: jobu
            character*1 :: uplo
            integer :: n
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tb01nd
        subroutine tb01pd(job,equil,n,m,p,a,lda,b,ldb,c,ldc,nr,tol,iwork,dwork,ldwork,info) ! in :slicot:TB01PD.f
            character :: job
            character :: equil
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: nr
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb01pd
        subroutine tb01td(n,m,p,a,lda,b,ldb,c,ldc,d,ldd,low,igh,scstat,scin,scout,dwork,info) ! in :slicot:TB01TD.f
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: low
            integer :: igh
            double precision dimension(*) :: scstat
            double precision dimension(*) :: scin
            double precision dimension(*) :: scout
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tb01td
        subroutine tb01ty(mode,ioff,joff,nrow,ncol,size_bn,x,ldx,bvect) ! in :slicot:TB01TY.f
            integer :: mode
            integer :: ioff
            integer :: joff
            integer :: nrow
            integer :: ncol
            double precision :: size_bn
            double precision dimension(ldx,*) :: x
            integer optional,check(shape(x,0)==ldx),depend(x) :: ldx=shape(x,0)
            double precision dimension(*) :: bvect
        end subroutine tb01ty
        subroutine tb01ud(jobz,n,m,p,a,lda,b,ldb,c,ldc,ncont,indcon,nblk,z,ldz,tau,tol,iwork,dwork,ldwork,info) ! in :slicot:TB01UD.f
            character :: jobz
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: ncont
            integer :: indcon
            integer dimension(*) :: nblk
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: tau
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb01ud
        subroutine tb01wd(n,m,p,a,lda,b,ldb,c,ldc,u,ldu,wr,wi,dwork,ldwork,info) ! in :slicot:TB01WD.f
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: wr
            double precision dimension(*) :: wi
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb01wd
        subroutine tb01xd(jobd,n,m,p,kl,ku,a,lda,b,ldb,c,ldc,d,ldd,info) ! in :slicot:TB01XD.f
            character :: jobd
            integer :: n
            integer :: m
            integer :: p
            integer :: kl
            integer :: ku
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: info
        end subroutine tb01xd
        subroutine tb01yd(n,m,p,a,lda,b,ldb,c,ldc,info) ! in :slicot:TB01YD.f
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: info
        end subroutine tb01yd
        subroutine tb01zd(jobz,n,p,a,lda,b,c,ldc,ncont,z,ldz,tau,tol,dwork,ldwork,info) ! in :slicot:TB01ZD.f
            character :: jobz
            integer :: n
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(*) :: b
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: ncont
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: tau
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb01zd
        subroutine tb03ad(leri,equil,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,nr,index_bn,pcoeff,ldpco1,ldpco2,qcoeff,ldqco1,ldqco2,vcoeff,ldvco1,ldvco2,tol,iwork,dwork,ldwork,info) ! in :slicot:TB03AD.f
            character :: leri
            character :: equil
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nr
            integer dimension(*) :: index_bn
            double precision dimension(ldpco1,ldpco2,*) :: pcoeff
            integer optional,check(shape(pcoeff,0)==ldpco1),depend(pcoeff) :: ldpco1=shape(pcoeff,0)
            integer optional,check(shape(pcoeff,1)==ldpco2),depend(pcoeff) :: ldpco2=shape(pcoeff,1)
            double precision dimension(ldqco1,ldqco2,*) :: qcoeff
            integer optional,check(shape(qcoeff,0)==ldqco1),depend(qcoeff) :: ldqco1=shape(qcoeff,0)
            integer optional,check(shape(qcoeff,1)==ldqco2),depend(qcoeff) :: ldqco2=shape(qcoeff,1)
            double precision dimension(ldvco1,ldvco2,*) :: vcoeff
            integer optional,check(shape(vcoeff,0)==ldvco1),depend(vcoeff) :: ldvco1=shape(vcoeff,0)
            integer optional,check(shape(vcoeff,1)==ldvco2),depend(vcoeff) :: ldvco2=shape(vcoeff,1)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb03ad
        subroutine tb03ay(nr,a,lda,indblk,nblk,vcoeff,ldvco1,ldvco2,pcoeff,ldpco1,ldpco2,info) ! in :slicot:TB03AY.f
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: indblk
            integer dimension(*) :: nblk
            double precision dimension(ldvco1,ldvco2,*) :: vcoeff
            integer optional,check(shape(vcoeff,0)==ldvco1),depend(vcoeff) :: ldvco1=shape(vcoeff,0)
            integer optional,check(shape(vcoeff,1)==ldvco2),depend(vcoeff) :: ldvco2=shape(vcoeff,1)
            double precision dimension(ldpco1,ldpco2,*) :: pcoeff
            integer optional,check(shape(pcoeff,0)==ldpco1),depend(pcoeff) :: ldpco1=shape(pcoeff,0)
            integer optional,check(shape(pcoeff,1)==ldpco2),depend(pcoeff) :: ldpco2=shape(pcoeff,1)
            integer :: info
        end subroutine tb03ay
        subroutine tb04ad(rowcol,n,m,p,a,lda,b,ldb,c,ldc,d,ldd,nr,index_bn,dcoeff,lddcoe,ucoeff,lduco1,lduco2,tol1,tol2,iwork,dwork,ldwork,info) ! in :slicot:TB04AD.f
            character :: rowcol
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: nr
            integer dimension(*) :: index_bn
            double precision dimension(lddcoe,*) :: dcoeff
            integer optional,check(shape(dcoeff,0)==lddcoe),depend(dcoeff) :: lddcoe=shape(dcoeff,0)
            double precision dimension(lduco1,lduco2,*) :: ucoeff
            integer optional,check(shape(ucoeff,0)==lduco1),depend(ucoeff) :: lduco1=shape(ucoeff,0)
            integer optional,check(shape(ucoeff,1)==lduco2),depend(ucoeff) :: lduco2=shape(ucoeff,1)
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb04ad
        subroutine tb04ay(n,mwork,pwork,a,lda,b,ldb,c,ldc,d,ldd,ncont,indexd,dcoeff,lddcoe,ucoeff,lduco1,lduco2,at,n1,tau,tol1,tol2,iwork,dwork,ldwork,info) ! in :slicot:TB04AY.f
            integer :: n
            integer :: mwork
            integer :: pwork
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: ncont
            integer dimension(*) :: indexd
            double precision dimension(lddcoe,*) :: dcoeff
            integer optional,check(shape(dcoeff,0)==lddcoe),depend(dcoeff) :: lddcoe=shape(dcoeff,0)
            double precision dimension(lduco1,lduco2,*) :: ucoeff
            integer optional,check(shape(ucoeff,0)==lduco1),depend(ucoeff) :: lduco1=shape(ucoeff,0)
            integer optional,check(shape(ucoeff,1)==lduco2),depend(ucoeff) :: lduco2=shape(ucoeff,1)
            double precision dimension(n1,*) :: at
            integer optional,check(shape(at,0)==n1),depend(at) :: n1=shape(at,0)
            double precision dimension(*) :: tau
            double precision :: tol1
            double precision :: tol2
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tb04ay
        subroutine tb05ad(baleig,inita,n,m,p,freq,a,lda,b,ldb,c,ldc,rcond,g,ldg,evre,evim,hinvb,ldhinv,iwork,dwork,ldwork,zwork,lzwork,info) ! in :slicot:TB05AD.f
            character :: baleig
            character :: inita
            integer :: n
            integer :: m
            integer :: p
            complex*16 :: freq
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision :: rcond
            complex*16 dimension(ldg,*) :: g
            integer optional,check(shape(g,0)==ldg),depend(g) :: ldg=shape(g,0)
            double precision dimension(*) :: evre
            double precision dimension(*) :: evim
            complex*16 dimension(ldhinv,*) :: hinvb
            integer optional,check(shape(hinvb,0)==ldhinv),depend(hinvb) :: ldhinv=shape(hinvb,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            complex*16 dimension(*) :: zwork
            integer :: lzwork
            integer :: info
        end subroutine tb05ad
        subroutine tc01od(leri,m,p,indlim,pcoeff,ldpco1,ldpco2,qcoeff,ldqco1,ldqco2,info) ! in :slicot:TC01OD.f
            character*1 :: leri
            integer :: m
            integer :: p
            integer :: indlim
            double precision dimension(ldpco1,ldpco2,*) :: pcoeff
            integer optional,check(shape(pcoeff,0)==ldpco1),depend(pcoeff) :: ldpco1=shape(pcoeff,0)
            integer optional,check(shape(pcoeff,1)==ldpco2),depend(pcoeff) :: ldpco2=shape(pcoeff,1)
            double precision dimension(ldqco1,ldqco2,*) :: qcoeff
            integer optional,check(shape(qcoeff,0)==ldqco1),depend(qcoeff) :: ldqco1=shape(qcoeff,0)
            integer optional,check(shape(qcoeff,1)==ldqco2),depend(qcoeff) :: ldqco2=shape(qcoeff,1)
            integer :: info
        end subroutine tc01od
        subroutine tc04ad(leri,m,p,index_bn,pcoeff,ldpco1,ldpco2,qcoeff,ldqco1,ldqco2,n,rcond,a,lda,b,ldb,c,ldc,d,ldd,iwork,dwork,ldwork,info) ! in :slicot:TC04AD.f
            character :: leri
            integer :: m
            integer :: p
            integer dimension(*) :: index_bn
            double precision dimension(ldpco1,ldpco2,*) :: pcoeff
            integer optional,check(shape(pcoeff,0)==ldpco1),depend(pcoeff) :: ldpco1=shape(pcoeff,0)
            integer optional,check(shape(pcoeff,1)==ldpco2),depend(pcoeff) :: ldpco2=shape(pcoeff,1)
            double precision dimension(ldqco1,ldqco2,*) :: qcoeff
            integer optional,check(shape(qcoeff,0)==ldqco1),depend(qcoeff) :: ldqco1=shape(qcoeff,0)
            integer optional,check(shape(qcoeff,1)==ldqco2),depend(qcoeff) :: ldqco2=shape(qcoeff,1)
            integer :: n
            double precision :: rcond
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tc04ad
        subroutine tc05ad(leri,m,p,sval,index_bn,pcoeff,ldpco1,ldpco2,qcoeff,ldqco1,ldqco2,rcond,cfreqr,ldcfre,iwork,dwork,zwork,info) ! in :slicot:TC05AD.f
            character :: leri
            integer :: m
            integer :: p
            complex*16 :: sval
            integer dimension(*) :: index_bn
            double precision dimension(ldpco1,ldpco2,*) :: pcoeff
            integer optional,check(shape(pcoeff,0)==ldpco1),depend(pcoeff) :: ldpco1=shape(pcoeff,0)
            integer optional,check(shape(pcoeff,1)==ldpco2),depend(pcoeff) :: ldpco2=shape(pcoeff,1)
            double precision dimension(ldqco1,ldqco2,*) :: qcoeff
            integer optional,check(shape(qcoeff,0)==ldqco1),depend(qcoeff) :: ldqco1=shape(qcoeff,0)
            integer optional,check(shape(qcoeff,1)==ldqco2),depend(qcoeff) :: ldqco2=shape(qcoeff,1)
            double precision :: rcond
            complex*16 dimension(ldcfre,*) :: cfreqr
            integer optional,check(shape(cfreqr,0)==ldcfre),depend(cfreqr) :: ldcfre=shape(cfreqr,0)
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            complex*16 dimension(*) :: zwork
            integer :: info
        end subroutine tc05ad
        subroutine td03ad(rowcol,leri,equil,m,p,indexd,dcoeff,lddcoe,ucoeff,lduco1,lduco2,nr,a,lda,b,ldb,c,ldc,d,ldd,indexp,pcoeff,ldpco1,ldpco2,qcoeff,ldqco1,ldqco2,vcoeff,ldvco1,ldvco2,tol,iwork,dwork,ldwork,info) ! in :slicot:TD03AD.f
            character :: rowcol
            character :: leri
            character :: equil
            integer :: m
            integer :: p
            integer dimension(*) :: indexd
            double precision dimension(lddcoe,*) :: dcoeff
            integer optional,check(shape(dcoeff,0)==lddcoe),depend(dcoeff) :: lddcoe=shape(dcoeff,0)
            double precision dimension(lduco1,lduco2,*) :: ucoeff
            integer optional,check(shape(ucoeff,0)==lduco1),depend(ucoeff) :: lduco1=shape(ucoeff,0)
            integer optional,check(shape(ucoeff,1)==lduco2),depend(ucoeff) :: lduco2=shape(ucoeff,1)
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer dimension(*) :: indexp
            double precision dimension(ldpco1,ldpco2,*) :: pcoeff
            integer optional,check(shape(pcoeff,0)==ldpco1),depend(pcoeff) :: ldpco1=shape(pcoeff,0)
            integer optional,check(shape(pcoeff,1)==ldpco2),depend(pcoeff) :: ldpco2=shape(pcoeff,1)
            double precision dimension(ldqco1,ldqco2,*) :: qcoeff
            integer optional,check(shape(qcoeff,0)==ldqco1),depend(qcoeff) :: ldqco1=shape(qcoeff,0)
            integer optional,check(shape(qcoeff,1)==ldqco2),depend(qcoeff) :: ldqco2=shape(qcoeff,1)
            double precision dimension(ldvco1,ldvco2,*) :: vcoeff
            integer optional,check(shape(vcoeff,0)==ldvco1),depend(vcoeff) :: ldvco1=shape(vcoeff,0)
            integer optional,check(shape(vcoeff,1)==ldvco2),depend(vcoeff) :: ldvco2=shape(vcoeff,1)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine td03ad
        subroutine td03ay(mwork,pwork,index_bn,dcoeff,lddcoe,ucoeff,lduco1,lduco2,n,a,lda,b,ldb,c,ldc,d,ldd,info) ! in :slicot:TD03AY.f
            integer :: mwork
            integer :: pwork
            integer dimension(*) :: index_bn
            double precision dimension(lddcoe,*) :: dcoeff
            integer optional,check(shape(dcoeff,0)==lddcoe),depend(dcoeff) :: lddcoe=shape(dcoeff,0)
            double precision dimension(lduco1,lduco2,*) :: ucoeff
            integer optional,check(shape(ucoeff,0)==lduco1),depend(ucoeff) :: lduco1=shape(ucoeff,0)
            integer optional,check(shape(ucoeff,1)==lduco2),depend(ucoeff) :: lduco2=shape(ucoeff,1)
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            integer :: info
        end subroutine td03ay
        subroutine td04ad(rowcol,m,p,index_bn,dcoeff,lddcoe,ucoeff,lduco1,lduco2,nr,a,lda,b,ldb,c,ldc,d,ldd,tol,iwork,dwork,ldwork,info) ! in :slicot:TD04AD.f
            character :: rowcol
            integer :: m
            integer :: p
            integer dimension(*) :: index_bn
            double precision dimension(lddcoe,*) :: dcoeff
            integer optional,check(shape(dcoeff,0)==lddcoe),depend(dcoeff) :: lddcoe=shape(dcoeff,0)
            double precision dimension(lduco1,lduco2,*) :: ucoeff
            integer optional,check(shape(ucoeff,0)==lduco1),depend(ucoeff) :: lduco1=shape(ucoeff,0)
            integer optional,check(shape(ucoeff,1)==lduco2),depend(ucoeff) :: lduco2=shape(ucoeff,1)
            integer :: nr
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine td04ad
        subroutine td05ad(unitf,output,np1,mp1,w,a,b,valr,vali,info) ! in :slicot:TD05AD.f
            character*1 :: unitf
            character*1 :: output
            integer :: np1
            integer :: mp1
            double precision :: w
            double precision dimension(*) :: a
            double precision dimension(*) :: b
            double precision :: valr
            double precision :: vali
            integer :: info
        end subroutine td05ad
        subroutine tf01md(n,m,p,ny,a,lda,b,ldb,c,ldc,d,ldd,u,ldu,x,y,ldy,dwork,info) ! in :slicot:TF01MD.f
            integer :: n
            integer :: m
            integer :: p
            integer :: ny
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: x
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tf01md
        subroutine tf01nd(uplo,n,m,p,ny,a,lda,b,ldb,c,ldc,d,ldd,u,ldu,x,y,ldy,dwork,info) ! in :slicot:TF01ND.f
            character*1 :: uplo
            integer :: n
            integer :: m
            integer :: p
            integer :: ny
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldd,*) :: d
            integer optional,check(shape(d,0)==ldd),depend(d) :: ldd=shape(d,0)
            double precision dimension(ldu,*) :: u
            integer optional,check(shape(u,0)==ldu),depend(u) :: ldu=shape(u,0)
            double precision dimension(*) :: x
            double precision dimension(ldy,*) :: y
            integer optional,check(shape(y,0)==ldy),depend(y) :: ldy=shape(y,0)
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tf01nd
        subroutine tf01od(nh1,nh2,nr,nc,h,ldh,t,ldt,info) ! in :slicot:TF01OD.f
            integer :: nh1
            integer :: nh2
            integer :: nr
            integer :: nc
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            integer :: info
        end subroutine tf01od
        subroutine tf01pd(nh1,nh2,nr,nc,h,ldh,t,ldt,info) ! in :slicot:TF01PD.f
            integer :: nh1
            integer :: nh2
            integer :: nr
            integer :: nc
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(ldt,*) :: t
            integer optional,check(shape(t,0)==ldt),depend(t) :: ldt=shape(t,0)
            integer :: info
        end subroutine tf01pd
        subroutine tf01qd(nc,nb,n,iord,ar,ma,h,ldh,info) ! in :slicot:TF01QD.f
            integer :: nc
            integer :: nb
            integer :: n
            integer dimension(*) :: iord
            double precision dimension(*) :: ar
            double precision dimension(*) :: ma
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            integer :: info
        end subroutine tf01qd
        subroutine tf01rd(na,nb,nc,n,a,lda,b,ldb,c,ldc,h,ldh,dwork,ldwork,info) ! in :slicot:TF01RD.f
            integer :: na
            integer :: nb
            integer :: nc
            integer :: n
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldh,*) :: h
            integer optional,check(shape(h,0)==ldh),depend(h) :: ldh=shape(h,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tf01rd
        subroutine tg01ad(job,l,n,m,p,thresh,a,lda,e,lde,b,ldb,c,ldc,lscale,rscale,dwork,info) ! in :slicot:TG01AD.f
            character :: job
            integer :: l
            integer :: n
            integer :: m
            integer :: p
            double precision :: thresh
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(*) :: lscale
            double precision dimension(*) :: rscale
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tg01ad
        subroutine tg01cd(compq,l,n,m,a,lda,e,lde,b,ldb,q,ldq,dwork,ldwork,info) ! in :slicot:TG01CD.f
            character :: compq
            integer :: l
            integer :: n
            integer :: m
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tg01cd
        subroutine tg01dd(compz,l,n,p,a,lda,e,lde,c,ldc,z,ldz,dwork,ldwork,info) ! in :slicot:TG01DD.f
            character :: compz
            integer :: l
            integer :: n
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tg01dd
        subroutine tg01ed(joba,l,n,m,p,a,lda,e,lde,b,ldb,c,ldc,q,ldq,z,ldz,ranke,rnka22,tol,dwork,ldwork,info) ! in :slicot:TG01ED.f
            character :: joba
            integer :: l
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: ranke
            integer :: rnka22
            double precision :: tol
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tg01ed
        subroutine tg01fd(compq,compz,joba,l,n,m,p,a,lda,e,lde,b,ldb,c,ldc,q,ldq,z,ldz,ranke,rnka22,tol,iwork,dwork,ldwork,info) ! in :slicot:TG01FD.f
            character :: compq
            character :: compz
            character :: joba
            integer :: l
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: ranke
            integer :: rnka22
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tg01fd
        subroutine tg01hd(jobcon,compq,compz,n,m,p,a,lda,e,lde,b,ldb,c,ldc,q,ldq,z,ldz,ncont,niucon,nrblck,rtau,tol,iwork,dwork,info) ! in :slicot:TG01HD.f
            character :: jobcon
            character :: compq
            character :: compz
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: ncont
            integer :: niucon
            integer :: nrblck
            integer dimension(*) :: rtau
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tg01hd
        subroutine tg01hx(compq,compz,l,n,m,p,n1,lbe,a,lda,e,lde,b,ldb,c,ldc,q,ldq,z,ldz,nr,nrblck,rtau,tol,iwork,dwork,info) ! in :slicot:TG01HX.f
            character :: compq
            character :: compz
            integer :: l
            integer :: n
            integer :: m
            integer :: p
            integer :: n1
            integer :: lbe
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: nr
            integer :: nrblck
            integer dimension(*) :: rtau
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tg01hx
        subroutine tg01id(jobobs,compq,compz,n,m,p,a,lda,e,lde,b,ldb,c,ldc,q,ldq,z,ldz,nobsv,niuobs,nlblck,ctau,tol,iwork,dwork,info) ! in :slicot:TG01ID.f
            character :: jobobs
            character :: compq
            character :: compz
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            double precision dimension(ldq,*) :: q
            integer optional,check(shape(q,0)==ldq),depend(q) :: ldq=shape(q,0)
            double precision dimension(ldz,*) :: z
            integer optional,check(shape(z,0)==ldz),depend(z) :: ldz=shape(z,0)
            integer :: nobsv
            integer :: niuobs
            integer :: nlblck
            integer dimension(*) :: ctau
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: info
        end subroutine tg01id
        subroutine tg01jd(job,systyp,equil,n,m,p,a,lda,e,lde,b,ldb,c,ldc,nr,infred,tol,iwork,dwork,ldwork,info) ! in :slicot:TG01JD.f
            character :: job
            character :: systyp
            character :: equil
            integer :: n
            integer :: m
            integer :: p
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            double precision dimension(lde,*) :: e
            integer optional,check(shape(e,0)==lde),depend(e) :: lde=shape(e,0)
            double precision dimension(ldb,*) :: b
            integer optional,check(shape(b,0)==ldb),depend(b) :: ldb=shape(b,0)
            double precision dimension(ldc,*) :: c
            integer optional,check(shape(c,0)==ldc),depend(c) :: ldc=shape(c,0)
            integer :: nr
            integer dimension(*) :: infred
            double precision :: tol
            integer dimension(*) :: iwork
            double precision dimension(*) :: dwork
            integer :: ldwork
            integer :: info
        end subroutine tg01jd
        subroutine ud01bd(mp,np,dp,nin,p,ldp1,ldp2,info) ! in :slicot:UD01BD.f
            integer :: mp
            integer :: np
            integer :: dp
            integer :: nin
            double precision dimension(ldp1,ldp2,*) :: p
            integer optional,check(shape(p,0)==ldp1),depend(p) :: ldp1=shape(p,0)
            integer optional,check(shape(p,1)==ldp2),depend(p) :: ldp2=shape(p,1)
            integer :: info
        end subroutine ud01bd
        subroutine ud01cd(mp,np,dp,nin,p,ldp1,ldp2,info) ! in :slicot:UD01CD.f
            integer :: mp
            integer :: np
            integer :: dp
            integer :: nin
            double precision dimension(ldp1,ldp2,*) :: p
            integer optional,check(shape(p,0)==ldp1),depend(p) :: ldp1=shape(p,0)
            integer optional,check(shape(p,1)==ldp2),depend(p) :: ldp2=shape(p,1)
            integer :: info
        end subroutine ud01cd
        subroutine ud01dd(m,n,nin,a,lda,info) ! in :slicot:UD01DD.f
            integer :: m
            integer :: n
            integer :: nin
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            integer :: info
        end subroutine ud01dd
        subroutine ud01md(m,n,l,nout,a,lda,text,info) ! in :slicot:UD01MD.f
            integer :: m
            integer :: n
            integer :: l
            integer :: nout
            double precision dimension(lda,*) :: a
            integer optional,check(shape(a,0)==lda),depend(a) :: lda=shape(a,0)
            character*(*) :: text
            integer :: info
        end subroutine ud01md
        subroutine ud01nd(mp,np,dp,l,nout,p,ldp1,ldp2,text,info) ! in :slicot:UD01ND.f
            integer :: mp
            integer :: np
            integer :: dp
            integer :: l
            integer :: nout
            double precision dimension(ldp1,ldp2,*) :: p
            integer optional,check(shape(p,0)==ldp1),depend(p) :: ldp1=shape(p,0)
            integer optional,check(shape(p,1)==ldp2),depend(p) :: ldp2=shape(p,1)
            character*(*) :: text
            integer :: info
        end subroutine ud01nd
    end interface 
end python module slicot

! This file was auto-generated with f2py (version:2_5585).
! See http://cens.ioc.ee/projects/f2py2e/
